
gof_coll.out:     file format elf64-x86-64


Disassembly of section .init:

0000000000001000 <_init>:
    1000:	48 83 ec 08          	sub    $0x8,%rsp
    1004:	48 8b 05 dd 3f 00 00 	mov    0x3fdd(%rip),%rax        # 4fe8 <__gmon_start__@Base>
    100b:	48 85 c0             	test   %rax,%rax
    100e:	74 02                	je     1012 <_init+0x12>
    1010:	ff d0                	call   *%rax
    1012:	48 83 c4 08          	add    $0x8,%rsp
    1016:	c3                   	ret    

Disassembly of section .plt:

0000000000001020 <puts@plt-0x10>:
    1020:	ff 35 e2 3f 00 00    	push   0x3fe2(%rip)        # 5008 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	ff 25 e4 3f 00 00    	jmp    *0x3fe4(%rip)        # 5010 <_GLOBAL_OFFSET_TABLE_+0x10>
    102c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000001030 <puts@plt>:
    1030:	ff 25 e2 3f 00 00    	jmp    *0x3fe2(%rip)        # 5018 <puts@GLIBC_2.2.5>
    1036:	68 00 00 00 00       	push   $0x0
    103b:	e9 e0 ff ff ff       	jmp    1020 <_init+0x20>

0000000000001040 <clock@plt>:
    1040:	ff 25 da 3f 00 00    	jmp    *0x3fda(%rip)        # 5020 <clock@GLIBC_2.2.5>
    1046:	68 01 00 00 00       	push   $0x1
    104b:	e9 d0 ff ff ff       	jmp    1020 <_init+0x20>

0000000000001050 <fclose@plt>:
    1050:	ff 25 d2 3f 00 00    	jmp    *0x3fd2(%rip)        # 5028 <fclose@GLIBC_2.2.5>
    1056:	68 02 00 00 00       	push   $0x2
    105b:	e9 c0 ff ff ff       	jmp    1020 <_init+0x20>

0000000000001060 <omp_get_wtime@plt>:
    1060:	ff 25 ca 3f 00 00    	jmp    *0x3fca(%rip)        # 5030 <omp_get_wtime@OMP_2.0>
    1066:	68 03 00 00 00       	push   $0x3
    106b:	e9 b0 ff ff ff       	jmp    1020 <_init+0x20>

0000000000001070 <strlen@plt>:
    1070:	ff 25 c2 3f 00 00    	jmp    *0x3fc2(%rip)        # 5038 <strlen@GLIBC_2.2.5>
    1076:	68 04 00 00 00       	push   $0x4
    107b:	e9 a0 ff ff ff       	jmp    1020 <_init+0x20>

0000000000001080 <rand_r@plt>:
    1080:	ff 25 ba 3f 00 00    	jmp    *0x3fba(%rip)        # 5040 <rand_r@GLIBC_2.2.5>
    1086:	68 05 00 00 00       	push   $0x5
    108b:	e9 90 ff ff ff       	jmp    1020 <_init+0x20>

0000000000001090 <getopt_long@plt>:
    1090:	ff 25 b2 3f 00 00    	jmp    *0x3fb2(%rip)        # 5048 <getopt_long@GLIBC_2.2.5>
    1096:	68 06 00 00 00       	push   $0x6
    109b:	e9 80 ff ff ff       	jmp    1020 <_init+0x20>

00000000000010a0 <printf@plt>:
    10a0:	ff 25 aa 3f 00 00    	jmp    *0x3faa(%rip)        # 5050 <printf@GLIBC_2.2.5>
    10a6:	68 07 00 00 00       	push   $0x7
    10ab:	e9 70 ff ff ff       	jmp    1020 <_init+0x20>

00000000000010b0 <GOMP_loop_maybe_nonmonotonic_runtime_start@plt>:
    10b0:	ff 25 a2 3f 00 00    	jmp    *0x3fa2(%rip)        # 5058 <GOMP_loop_maybe_nonmonotonic_runtime_start@GOMP_5.0>
    10b6:	68 08 00 00 00       	push   $0x8
    10bb:	e9 60 ff ff ff       	jmp    1020 <_init+0x20>

00000000000010c0 <GOMP_loop_end_nowait@plt>:
    10c0:	ff 25 9a 3f 00 00    	jmp    *0x3f9a(%rip)        # 5060 <GOMP_loop_end_nowait@GOMP_1.0>
    10c6:	68 09 00 00 00       	push   $0x9
    10cb:	e9 50 ff ff ff       	jmp    1020 <_init+0x20>

00000000000010d0 <fputc@plt>:
    10d0:	ff 25 92 3f 00 00    	jmp    *0x3f92(%rip)        # 5068 <fputc@GLIBC_2.2.5>
    10d6:	68 0a 00 00 00       	push   $0xa
    10db:	e9 40 ff ff ff       	jmp    1020 <_init+0x20>

00000000000010e0 <fprintf@plt>:
    10e0:	ff 25 8a 3f 00 00    	jmp    *0x3f8a(%rip)        # 5070 <fprintf@GLIBC_2.2.5>
    10e6:	68 0b 00 00 00       	push   $0xb
    10eb:	e9 30 ff ff ff       	jmp    1020 <_init+0x20>

00000000000010f0 <strtol@plt>:
    10f0:	ff 25 82 3f 00 00    	jmp    *0x3f82(%rip)        # 5078 <strtol@GLIBC_2.2.5>
    10f6:	68 0c 00 00 00       	push   $0xc
    10fb:	e9 20 ff ff ff       	jmp    1020 <_init+0x20>

0000000000001100 <time@plt>:
    1100:	ff 25 7a 3f 00 00    	jmp    *0x3f7a(%rip)        # 5080 <time@GLIBC_2.2.5>
    1106:	68 0d 00 00 00       	push   $0xd
    110b:	e9 10 ff ff ff       	jmp    1020 <_init+0x20>

0000000000001110 <malloc@plt>:
    1110:	ff 25 72 3f 00 00    	jmp    *0x3f72(%rip)        # 5088 <malloc@GLIBC_2.2.5>
    1116:	68 0e 00 00 00       	push   $0xe
    111b:	e9 00 ff ff ff       	jmp    1020 <_init+0x20>

0000000000001120 <pthread_self@plt>:
    1120:	ff 25 6a 3f 00 00    	jmp    *0x3f6a(%rip)        # 5090 <pthread_self@GLIBC_2.2.5>
    1126:	68 0f 00 00 00       	push   $0xf
    112b:	e9 f0 fe ff ff       	jmp    1020 <_init+0x20>

0000000000001130 <GOMP_loop_maybe_nonmonotonic_runtime_next@plt>:
    1130:	ff 25 62 3f 00 00    	jmp    *0x3f62(%rip)        # 5098 <GOMP_loop_maybe_nonmonotonic_runtime_next@GOMP_5.0>
    1136:	68 10 00 00 00       	push   $0x10
    113b:	e9 e0 fe ff ff       	jmp    1020 <_init+0x20>

0000000000001140 <fopen@plt>:
    1140:	ff 25 5a 3f 00 00    	jmp    *0x3f5a(%rip)        # 50a0 <fopen@GLIBC_2.2.5>
    1146:	68 11 00 00 00       	push   $0x11
    114b:	e9 d0 fe ff ff       	jmp    1020 <_init+0x20>

0000000000001150 <strtok@plt>:
    1150:	ff 25 52 3f 00 00    	jmp    *0x3f52(%rip)        # 50a8 <strtok@GLIBC_2.2.5>
    1156:	68 12 00 00 00       	push   $0x12
    115b:	e9 c0 fe ff ff       	jmp    1020 <_init+0x20>

0000000000001160 <atoi@plt>:
    1160:	ff 25 4a 3f 00 00    	jmp    *0x3f4a(%rip)        # 50b0 <atoi@GLIBC_2.2.5>
    1166:	68 13 00 00 00       	push   $0x13
    116b:	e9 b0 fe ff ff       	jmp    1020 <_init+0x20>

0000000000001170 <sprintf@plt>:
    1170:	ff 25 42 3f 00 00    	jmp    *0x3f42(%rip)        # 50b8 <sprintf@GLIBC_2.2.5>
    1176:	68 14 00 00 00       	push   $0x14
    117b:	e9 a0 fe ff ff       	jmp    1020 <_init+0x20>

0000000000001180 <exit@plt>:
    1180:	ff 25 3a 3f 00 00    	jmp    *0x3f3a(%rip)        # 50c0 <exit@GLIBC_2.2.5>
    1186:	68 15 00 00 00       	push   $0x15
    118b:	e9 90 fe ff ff       	jmp    1020 <_init+0x20>

0000000000001190 <fwrite@plt>:
    1190:	ff 25 32 3f 00 00    	jmp    *0x3f32(%rip)        # 50c8 <fwrite@GLIBC_2.2.5>
    1196:	68 16 00 00 00       	push   $0x16
    119b:	e9 80 fe ff ff       	jmp    1020 <_init+0x20>

00000000000011a0 <omp_get_thread_limit@plt>:
    11a0:	ff 25 2a 3f 00 00    	jmp    *0x3f2a(%rip)        # 50d0 <omp_get_thread_limit@OMP_3.0>
    11a6:	68 17 00 00 00       	push   $0x17
    11ab:	e9 70 fe ff ff       	jmp    1020 <_init+0x20>

00000000000011b0 <GOMP_parallel@plt>:
    11b0:	ff 25 22 3f 00 00    	jmp    *0x3f22(%rip)        # 50d8 <GOMP_parallel@GOMP_4.0>
    11b6:	68 18 00 00 00       	push   $0x18
    11bb:	e9 60 fe ff ff       	jmp    1020 <_init+0x20>

Disassembly of section .plt.got:

00000000000011c0 <__cxa_finalize@plt>:
    11c0:	ff 25 32 3e 00 00    	jmp    *0x3e32(%rip)        # 4ff8 <__cxa_finalize@GLIBC_2.2.5>
    11c6:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

00000000000011d0 <_start>:
    11d0:	31 ed                	xor    %ebp,%ebp
    11d2:	49 89 d1             	mov    %rdx,%r9
    11d5:	5e                   	pop    %rsi
    11d6:	48 89 e2             	mov    %rsp,%rdx
    11d9:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    11dd:	50                   	push   %rax
    11de:	54                   	push   %rsp
    11df:	4c 8d 05 5a 19 00 00 	lea    0x195a(%rip),%r8        # 2b40 <__libc_csu_fini>
    11e6:	48 8d 0d f3 18 00 00 	lea    0x18f3(%rip),%rcx        # 2ae0 <__libc_csu_init>
    11ed:	48 8d 3d 78 0a 00 00 	lea    0xa78(%rip),%rdi        # 1c6c <main>
    11f4:	ff 15 e6 3d 00 00    	call   *0x3de6(%rip)        # 4fe0 <__libc_start_main@GLIBC_2.2.5>
    11fa:	f4                   	hlt    
    11fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001200 <deregister_tm_clones>:
    1200:	48 8d 3d d9 40 00 00 	lea    0x40d9(%rip),%rdi        # 52e0 <optarg@@GLIBC_2.2.5>
    1207:	48 8d 05 d2 40 00 00 	lea    0x40d2(%rip),%rax        # 52e0 <optarg@@GLIBC_2.2.5>
    120e:	48 39 f8             	cmp    %rdi,%rax
    1211:	74 15                	je     1228 <deregister_tm_clones+0x28>
    1213:	48 8b 05 be 3d 00 00 	mov    0x3dbe(%rip),%rax        # 4fd8 <_ITM_deregisterTMCloneTable@Base>
    121a:	48 85 c0             	test   %rax,%rax
    121d:	74 09                	je     1228 <deregister_tm_clones+0x28>
    121f:	ff e0                	jmp    *%rax
    1221:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1228:	c3                   	ret    
    1229:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001230 <register_tm_clones>:
    1230:	48 8d 3d a9 40 00 00 	lea    0x40a9(%rip),%rdi        # 52e0 <optarg@@GLIBC_2.2.5>
    1237:	48 8d 35 a2 40 00 00 	lea    0x40a2(%rip),%rsi        # 52e0 <optarg@@GLIBC_2.2.5>
    123e:	48 29 fe             	sub    %rdi,%rsi
    1241:	48 89 f0             	mov    %rsi,%rax
    1244:	48 c1 ee 3f          	shr    $0x3f,%rsi
    1248:	48 c1 f8 03          	sar    $0x3,%rax
    124c:	48 01 c6             	add    %rax,%rsi
    124f:	48 d1 fe             	sar    %rsi
    1252:	74 14                	je     1268 <register_tm_clones+0x38>
    1254:	48 8b 05 95 3d 00 00 	mov    0x3d95(%rip),%rax        # 4ff0 <_ITM_registerTMCloneTable@Base>
    125b:	48 85 c0             	test   %rax,%rax
    125e:	74 08                	je     1268 <register_tm_clones+0x38>
    1260:	ff e0                	jmp    *%rax
    1262:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1268:	c3                   	ret    
    1269:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001270 <__do_global_dtors_aux>:
    1270:	f3 0f 1e fa          	endbr64 
    1274:	80 3d 6d 40 00 00 00 	cmpb   $0x0,0x406d(%rip)        # 52e8 <completed.0>
    127b:	75 2b                	jne    12a8 <__do_global_dtors_aux+0x38>
    127d:	55                   	push   %rbp
    127e:	48 83 3d 72 3d 00 00 	cmpq   $0x0,0x3d72(%rip)        # 4ff8 <__cxa_finalize@GLIBC_2.2.5>
    1285:	00 
    1286:	48 89 e5             	mov    %rsp,%rbp
    1289:	74 0c                	je     1297 <__do_global_dtors_aux+0x27>
    128b:	48 8b 3d 56 3e 00 00 	mov    0x3e56(%rip),%rdi        # 50e8 <__dso_handle>
    1292:	e8 29 ff ff ff       	call   11c0 <__cxa_finalize@plt>
    1297:	e8 64 ff ff ff       	call   1200 <deregister_tm_clones>
    129c:	c6 05 45 40 00 00 01 	movb   $0x1,0x4045(%rip)        # 52e8 <completed.0>
    12a3:	5d                   	pop    %rbp
    12a4:	c3                   	ret    
    12a5:	0f 1f 00             	nopl   (%rax)
    12a8:	c3                   	ret    
    12a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000012b0 <frame_dummy>:
    12b0:	f3 0f 1e fa          	endbr64 
    12b4:	e9 77 ff ff ff       	jmp    1230 <register_tm_clones>

00000000000012b9 <field_initializer>:
                {"progress",    optional_argument, NULL, 'p'},
                {"repetitions", optional_argument, NULL, 'R'},
                {"size",        optional_argument, NULL, 's'},
                {NULL,          0,                 NULL, 0}};

void field_initializer(u_int8_t *state) {
    12b9:	55                   	push   %rbp
    12ba:	48 89 e5             	mov    %rsp,%rbp
    12bd:	48 83 ec 40          	sub    $0x40,%rsp
    12c1:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    //fills fields with random numbers 0 = dead, 1 = alive
#pragma omp parallel
    12c5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    12c9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    12cd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    12d1:	b9 00 00 00 00       	mov    $0x0,%ecx
    12d6:	ba 00 00 00 00       	mov    $0x0,%edx
    12db:	48 89 c6             	mov    %rax,%rsi
    12de:	48 8d 05 4e 0d 00 00 	lea    0xd4e(%rip),%rax        # 2033 <field_initializer._omp_fn.0>
    12e5:	48 89 c7             	mov    %rax,%rdi
    12e8:	e8 c3 fe ff ff       	call   11b0 <GOMP_parallel@plt>
#pragma omp parallel for schedule(runtime)
        for (int i = 0; i < columns * rows; i++) {
            state[i] = rand_r(&seed) % 2;
        }
    }
    return;
    12ed:	90                   	nop
}
    12ee:	c9                   	leave  
    12ef:	c3                   	ret    

00000000000012f0 <calculate_corners>:

void calculate_corners(u_int8_t *state, u_int8_t *state_old) {
    12f0:	55                   	push   %rbp
    12f1:	48 89 e5             	mov    %rsp,%rbp
    12f4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    12f8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    u_int8_t corner_sum;
    // top left
    corner_sum = state_old[1] +
    12fc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    1300:	48 83 c0 01          	add    $0x1,%rax
    1304:	0f b6 10             	movzbl (%rax),%edx
                 state_old[columns] +
    1307:	48 8b 0d fa 3d 00 00 	mov    0x3dfa(%rip),%rcx        # 5108 <columns>
    130e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    1312:	48 01 c8             	add    %rcx,%rax
    1315:	0f b6 00             	movzbl (%rax),%eax
    corner_sum = state_old[1] +
    1318:	01 c2                	add    %eax,%edx
                 state_old[columns + 1] +
    131a:	48 8b 05 e7 3d 00 00 	mov    0x3de7(%rip),%rax        # 5108 <columns>
    1321:	48 8d 48 01          	lea    0x1(%rax),%rcx
    1325:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    1329:	48 01 c8             	add    %rcx,%rax
    132c:	0f b6 00             	movzbl (%rax),%eax
                 state_old[columns] +
    132f:	8d 0c 02             	lea    (%rdx,%rax,1),%ecx
                 state_old[(rows - 1) * columns] +
    1332:	48 8b 05 d7 3d 00 00 	mov    0x3dd7(%rip),%rax        # 5110 <rows>
    1339:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    133d:	48 8b 05 c4 3d 00 00 	mov    0x3dc4(%rip),%rax        # 5108 <columns>
    1344:	48 0f af d0          	imul   %rax,%rdx
    1348:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    134c:	48 01 d0             	add    %rdx,%rax
    134f:	0f b6 00             	movzbl (%rax),%eax
                 state_old[columns + 1] +
    1352:	01 c1                	add    %eax,%ecx
                 state_old[(rows - 1) * columns + 1] +
    1354:	48 8b 05 b5 3d 00 00 	mov    0x3db5(%rip),%rax        # 5110 <rows>
    135b:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    135f:	48 8b 05 a2 3d 00 00 	mov    0x3da2(%rip),%rax        # 5108 <columns>
    1366:	48 0f af c2          	imul   %rdx,%rax
    136a:	48 8d 50 01          	lea    0x1(%rax),%rdx
    136e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    1372:	48 01 d0             	add    %rdx,%rax
    1375:	0f b6 00             	movzbl (%rax),%eax
                 state_old[(rows - 1) * columns] +
    1378:	8d 14 01             	lea    (%rcx,%rax,1),%edx
                 state_old[columns - 1] +
    137b:	48 8b 05 86 3d 00 00 	mov    0x3d86(%rip),%rax        # 5108 <columns>
    1382:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    1386:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    138a:	48 01 c8             	add    %rcx,%rax
    138d:	0f b6 00             	movzbl (%rax),%eax
                 state_old[(rows - 1) * columns + 1] +
    1390:	01 c2                	add    %eax,%edx
                 state_old[2 * columns - 1] +
    1392:	48 8b 05 6f 3d 00 00 	mov    0x3d6f(%rip),%rax        # 5108 <columns>
    1399:	48 01 c0             	add    %rax,%rax
    139c:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    13a0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    13a4:	48 01 c8             	add    %rcx,%rax
    13a7:	0f b6 00             	movzbl (%rax),%eax
                 state_old[columns - 1] +
    13aa:	8d 0c 02             	lea    (%rdx,%rax,1),%ecx
                 state_old[rows * columns - 1];
    13ad:	48 8b 15 5c 3d 00 00 	mov    0x3d5c(%rip),%rdx        # 5110 <rows>
    13b4:	48 8b 05 4d 3d 00 00 	mov    0x3d4d(%rip),%rax        # 5108 <columns>
    13bb:	48 0f af c2          	imul   %rdx,%rax
    13bf:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    13c3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    13c7:	48 01 d0             	add    %rdx,%rax
    13ca:	0f b6 00             	movzbl (%rax),%eax
    corner_sum = state_old[1] +
    13cd:	01 c8                	add    %ecx,%eax
    13cf:	88 45 ff             	mov    %al,-0x1(%rbp)
    state[0] = (corner_sum == 3) | ((corner_sum == 2) & state_old[0]);
    13d2:	80 7d ff 03          	cmpb   $0x3,-0x1(%rbp)
    13d6:	0f 94 c0             	sete   %al
    13d9:	89 c2                	mov    %eax,%edx
    13db:	80 7d ff 02          	cmpb   $0x2,-0x1(%rbp)
    13df:	0f 94 c0             	sete   %al
    13e2:	89 c1                	mov    %eax,%ecx
    13e4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    13e8:	0f b6 00             	movzbl (%rax),%eax
    13eb:	21 c8                	and    %ecx,%eax
    13ed:	09 d0                	or     %edx,%eax
    13ef:	89 c2                	mov    %eax,%edx
    13f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    13f5:	88 10                	mov    %dl,(%rax)
    // top right
    corner_sum = state_old[columns - 2] +
    13f7:	48 8b 05 0a 3d 00 00 	mov    0x3d0a(%rip),%rax        # 5108 <columns>
    13fe:	48 8d 50 fe          	lea    -0x2(%rax),%rdx
    1402:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    1406:	48 01 d0             	add    %rdx,%rax
    1409:	0f b6 10             	movzbl (%rax),%edx
                 state_old[2 * columns - 1] +
    140c:	48 8b 05 f5 3c 00 00 	mov    0x3cf5(%rip),%rax        # 5108 <columns>
    1413:	48 01 c0             	add    %rax,%rax
    1416:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    141a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    141e:	48 01 c8             	add    %rcx,%rax
    1421:	0f b6 00             	movzbl (%rax),%eax
    corner_sum = state_old[columns - 2] +
    1424:	01 c2                	add    %eax,%edx
                 state_old[2 * columns - 2] +
    1426:	48 8b 05 db 3c 00 00 	mov    0x3cdb(%rip),%rax        # 5108 <columns>
    142d:	48 01 c0             	add    %rax,%rax
    1430:	48 8d 48 fe          	lea    -0x2(%rax),%rcx
    1434:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    1438:	48 01 c8             	add    %rcx,%rax
    143b:	0f b6 00             	movzbl (%rax),%eax
                 state_old[2 * columns - 1] +
    143e:	8d 0c 02             	lea    (%rdx,%rax,1),%ecx
                 state_old[rows * columns - 1] +
    1441:	48 8b 15 c8 3c 00 00 	mov    0x3cc8(%rip),%rdx        # 5110 <rows>
    1448:	48 8b 05 b9 3c 00 00 	mov    0x3cb9(%rip),%rax        # 5108 <columns>
    144f:	48 0f af c2          	imul   %rdx,%rax
    1453:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    1457:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    145b:	48 01 d0             	add    %rdx,%rax
    145e:	0f b6 00             	movzbl (%rax),%eax
                 state_old[2 * columns - 2] +
    1461:	01 c1                	add    %eax,%ecx
                 state_old[rows * columns - 2] +
    1463:	48 8b 15 a6 3c 00 00 	mov    0x3ca6(%rip),%rdx        # 5110 <rows>
    146a:	48 8b 05 97 3c 00 00 	mov    0x3c97(%rip),%rax        # 5108 <columns>
    1471:	48 0f af c2          	imul   %rdx,%rax
    1475:	48 8d 50 fe          	lea    -0x2(%rax),%rdx
    1479:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    147d:	48 01 d0             	add    %rdx,%rax
    1480:	0f b6 00             	movzbl (%rax),%eax
                 state_old[rows * columns - 1] +
    1483:	8d 14 01             	lea    (%rcx,%rax,1),%edx
                 state_old[0] +
    1486:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    148a:	0f b6 00             	movzbl (%rax),%eax
                 state_old[rows * columns - 2] +
    148d:	8d 0c 02             	lea    (%rdx,%rax,1),%ecx
                 state_old[columns] +
    1490:	48 8b 15 71 3c 00 00 	mov    0x3c71(%rip),%rdx        # 5108 <columns>
    1497:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    149b:	48 01 d0             	add    %rdx,%rax
    149e:	0f b6 00             	movzbl (%rax),%eax
                 state_old[0] +
    14a1:	01 c1                	add    %eax,%ecx
                 state_old[(rows - 1) * columns];
    14a3:	48 8b 05 66 3c 00 00 	mov    0x3c66(%rip),%rax        # 5110 <rows>
    14aa:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    14ae:	48 8b 05 53 3c 00 00 	mov    0x3c53(%rip),%rax        # 5108 <columns>
    14b5:	48 0f af d0          	imul   %rax,%rdx
    14b9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    14bd:	48 01 d0             	add    %rdx,%rax
    14c0:	0f b6 00             	movzbl (%rax),%eax
    corner_sum = state_old[columns - 2] +
    14c3:	01 c8                	add    %ecx,%eax
    14c5:	88 45 ff             	mov    %al,-0x1(%rbp)
    state[columns - 1] = (corner_sum == 3) | ((corner_sum == 2) & state_old[columns - 1]);
    14c8:	80 7d ff 03          	cmpb   $0x3,-0x1(%rbp)
    14cc:	0f 94 c0             	sete   %al
    14cf:	89 c1                	mov    %eax,%ecx
    14d1:	80 7d ff 02          	cmpb   $0x2,-0x1(%rbp)
    14d5:	0f 94 c0             	sete   %al
    14d8:	89 c6                	mov    %eax,%esi
    14da:	48 8b 05 27 3c 00 00 	mov    0x3c27(%rip),%rax        # 5108 <columns>
    14e1:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    14e5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    14e9:	48 01 d0             	add    %rdx,%rax
    14ec:	0f b6 00             	movzbl (%rax),%eax
    14ef:	21 f0                	and    %esi,%eax
    14f1:	09 c1                	or     %eax,%ecx
    14f3:	89 ca                	mov    %ecx,%edx
    14f5:	48 8b 05 0c 3c 00 00 	mov    0x3c0c(%rip),%rax        # 5108 <columns>
    14fc:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    1500:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1504:	48 01 c8             	add    %rcx,%rax
    1507:	88 10                	mov    %dl,(%rax)
    // bottom left
    corner_sum = state_old[(rows - 2) * columns] +
    1509:	48 8b 05 00 3c 00 00 	mov    0x3c00(%rip),%rax        # 5110 <rows>
    1510:	48 8d 50 fe          	lea    -0x2(%rax),%rdx
    1514:	48 8b 05 ed 3b 00 00 	mov    0x3bed(%rip),%rax        # 5108 <columns>
    151b:	48 0f af d0          	imul   %rax,%rdx
    151f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    1523:	48 01 d0             	add    %rdx,%rax
    1526:	0f b6 08             	movzbl (%rax),%ecx
                 state_old[(rows - 2) * columns + 1] +
    1529:	48 8b 05 e0 3b 00 00 	mov    0x3be0(%rip),%rax        # 5110 <rows>
    1530:	48 8d 50 fe          	lea    -0x2(%rax),%rdx
    1534:	48 8b 05 cd 3b 00 00 	mov    0x3bcd(%rip),%rax        # 5108 <columns>
    153b:	48 0f af c2          	imul   %rdx,%rax
    153f:	48 8d 50 01          	lea    0x1(%rax),%rdx
    1543:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    1547:	48 01 d0             	add    %rdx,%rax
    154a:	0f b6 00             	movzbl (%rax),%eax
    corner_sum = state_old[(rows - 2) * columns] +
    154d:	01 c1                	add    %eax,%ecx
                 state_old[(rows - 1) * columns + 1] +
    154f:	48 8b 05 ba 3b 00 00 	mov    0x3bba(%rip),%rax        # 5110 <rows>
    1556:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    155a:	48 8b 05 a7 3b 00 00 	mov    0x3ba7(%rip),%rax        # 5108 <columns>
    1561:	48 0f af c2          	imul   %rdx,%rax
    1565:	48 8d 50 01          	lea    0x1(%rax),%rdx
    1569:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    156d:	48 01 d0             	add    %rdx,%rax
    1570:	0f b6 00             	movzbl (%rax),%eax
                 state_old[(rows - 2) * columns + 1] +
    1573:	8d 14 01             	lea    (%rcx,%rax,1),%edx
                 state_old[0] +
    1576:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    157a:	0f b6 00             	movzbl (%rax),%eax
                 state_old[(rows - 1) * columns + 1] +
    157d:	01 c2                	add    %eax,%edx
                 state_old[1] +
    157f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    1583:	48 83 c0 01          	add    $0x1,%rax
    1587:	0f b6 00             	movzbl (%rax),%eax
                 state_old[0] +
    158a:	01 c2                	add    %eax,%edx
                 state_old[columns - 1] +
    158c:	48 8b 05 75 3b 00 00 	mov    0x3b75(%rip),%rax        # 5108 <columns>
    1593:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    1597:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    159b:	48 01 c8             	add    %rcx,%rax
    159e:	0f b6 00             	movzbl (%rax),%eax
                 state_old[1] +
    15a1:	8d 0c 02             	lea    (%rdx,%rax,1),%ecx
                 state_old[(rows - 1) * columns - 1] +
    15a4:	48 8b 05 65 3b 00 00 	mov    0x3b65(%rip),%rax        # 5110 <rows>
    15ab:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    15af:	48 8b 05 52 3b 00 00 	mov    0x3b52(%rip),%rax        # 5108 <columns>
    15b6:	48 0f af c2          	imul   %rdx,%rax
    15ba:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    15be:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    15c2:	48 01 d0             	add    %rdx,%rax
    15c5:	0f b6 00             	movzbl (%rax),%eax
                 state_old[columns - 1] +
    15c8:	01 c1                	add    %eax,%ecx
                 state_old[(rows * columns - 1)];
    15ca:	48 8b 15 3f 3b 00 00 	mov    0x3b3f(%rip),%rdx        # 5110 <rows>
    15d1:	48 8b 05 30 3b 00 00 	mov    0x3b30(%rip),%rax        # 5108 <columns>
    15d8:	48 0f af c2          	imul   %rdx,%rax
    15dc:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    15e0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    15e4:	48 01 d0             	add    %rdx,%rax
    15e7:	0f b6 00             	movzbl (%rax),%eax
    corner_sum = state_old[(rows - 2) * columns] +
    15ea:	01 c8                	add    %ecx,%eax
    15ec:	88 45 ff             	mov    %al,-0x1(%rbp)
    state[(rows - 1) * columns] = (corner_sum == 3) | ((corner_sum == 2) & state_old[(rows - 1) * columns]);
    15ef:	80 7d ff 03          	cmpb   $0x3,-0x1(%rbp)
    15f3:	0f 94 c0             	sete   %al
    15f6:	89 c1                	mov    %eax,%ecx
    15f8:	80 7d ff 02          	cmpb   $0x2,-0x1(%rbp)
    15fc:	0f 94 c0             	sete   %al
    15ff:	89 c6                	mov    %eax,%esi
    1601:	48 8b 05 08 3b 00 00 	mov    0x3b08(%rip),%rax        # 5110 <rows>
    1608:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    160c:	48 8b 05 f5 3a 00 00 	mov    0x3af5(%rip),%rax        # 5108 <columns>
    1613:	48 0f af d0          	imul   %rax,%rdx
    1617:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    161b:	48 01 d0             	add    %rdx,%rax
    161e:	0f b6 00             	movzbl (%rax),%eax
    1621:	21 f0                	and    %esi,%eax
    1623:	09 c1                	or     %eax,%ecx
    1625:	48 8b 05 e4 3a 00 00 	mov    0x3ae4(%rip),%rax        # 5110 <rows>
    162c:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    1630:	48 8b 05 d1 3a 00 00 	mov    0x3ad1(%rip),%rax        # 5108 <columns>
    1637:	48 0f af d0          	imul   %rax,%rdx
    163b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    163f:	48 01 d0             	add    %rdx,%rax
    1642:	89 ca                	mov    %ecx,%edx
    1644:	88 10                	mov    %dl,(%rax)
    // bottom right
    corner_sum = state_old[0] +
    1646:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    164a:	0f b6 10             	movzbl (%rax),%edx
                 state_old[columns - 1] +
    164d:	48 8b 05 b4 3a 00 00 	mov    0x3ab4(%rip),%rax        # 5108 <columns>
    1654:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    1658:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    165c:	48 01 c8             	add    %rcx,%rax
    165f:	0f b6 00             	movzbl (%rax),%eax
    corner_sum = state_old[0] +
    1662:	01 c2                	add    %eax,%edx
                 state_old[columns - 2] +
    1664:	48 8b 05 9d 3a 00 00 	mov    0x3a9d(%rip),%rax        # 5108 <columns>
    166b:	48 8d 48 fe          	lea    -0x2(%rax),%rcx
    166f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    1673:	48 01 c8             	add    %rcx,%rax
    1676:	0f b6 00             	movzbl (%rax),%eax
                 state_old[columns - 1] +
    1679:	8d 0c 02             	lea    (%rdx,%rax,1),%ecx
                 state_old[(rows - 2) * columns] +
    167c:	48 8b 05 8d 3a 00 00 	mov    0x3a8d(%rip),%rax        # 5110 <rows>
    1683:	48 8d 50 fe          	lea    -0x2(%rax),%rdx
    1687:	48 8b 05 7a 3a 00 00 	mov    0x3a7a(%rip),%rax        # 5108 <columns>
    168e:	48 0f af d0          	imul   %rax,%rdx
    1692:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    1696:	48 01 d0             	add    %rdx,%rax
    1699:	0f b6 00             	movzbl (%rax),%eax
                 state_old[columns - 2] +
    169c:	01 c1                	add    %eax,%ecx
                 state_old[(rows - 1) * columns] +
    169e:	48 8b 05 6b 3a 00 00 	mov    0x3a6b(%rip),%rax        # 5110 <rows>
    16a5:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    16a9:	48 8b 05 58 3a 00 00 	mov    0x3a58(%rip),%rax        # 5108 <columns>
    16b0:	48 0f af d0          	imul   %rax,%rdx
    16b4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    16b8:	48 01 d0             	add    %rdx,%rax
    16bb:	0f b6 00             	movzbl (%rax),%eax
                 state_old[(rows - 2) * columns] +
    16be:	01 c1                	add    %eax,%ecx
                 state_old[(rows - 1) * columns - 1] +
    16c0:	48 8b 05 49 3a 00 00 	mov    0x3a49(%rip),%rax        # 5110 <rows>
    16c7:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    16cb:	48 8b 05 36 3a 00 00 	mov    0x3a36(%rip),%rax        # 5108 <columns>
    16d2:	48 0f af c2          	imul   %rdx,%rax
    16d6:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    16da:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    16de:	48 01 d0             	add    %rdx,%rax
    16e1:	0f b6 00             	movzbl (%rax),%eax
                 state_old[(rows - 1) * columns] +
    16e4:	01 c1                	add    %eax,%ecx
                 state_old[(rows - 1) * columns - 2] +
    16e6:	48 8b 05 23 3a 00 00 	mov    0x3a23(%rip),%rax        # 5110 <rows>
    16ed:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    16f1:	48 8b 05 10 3a 00 00 	mov    0x3a10(%rip),%rax        # 5108 <columns>
    16f8:	48 0f af c2          	imul   %rdx,%rax
    16fc:	48 8d 50 fe          	lea    -0x2(%rax),%rdx
    1700:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    1704:	48 01 d0             	add    %rdx,%rax
    1707:	0f b6 00             	movzbl (%rax),%eax
                 state_old[(rows - 1) * columns - 1] +
    170a:	01 c1                	add    %eax,%ecx
                 state_old[(rows * columns - 2)];
    170c:	48 8b 15 fd 39 00 00 	mov    0x39fd(%rip),%rdx        # 5110 <rows>
    1713:	48 8b 05 ee 39 00 00 	mov    0x39ee(%rip),%rax        # 5108 <columns>
    171a:	48 0f af c2          	imul   %rdx,%rax
    171e:	48 8d 50 fe          	lea    -0x2(%rax),%rdx
    1722:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    1726:	48 01 d0             	add    %rdx,%rax
    1729:	0f b6 00             	movzbl (%rax),%eax
    corner_sum = state_old[0] +
    172c:	01 c8                	add    %ecx,%eax
    172e:	88 45 ff             	mov    %al,-0x1(%rbp)
    state[rows * columns - 1] = (corner_sum == 3) | ((corner_sum == 2) & state_old[rows * columns - 1]);
    1731:	80 7d ff 03          	cmpb   $0x3,-0x1(%rbp)
    1735:	0f 94 c0             	sete   %al
    1738:	89 c1                	mov    %eax,%ecx
    173a:	80 7d ff 02          	cmpb   $0x2,-0x1(%rbp)
    173e:	0f 94 c0             	sete   %al
    1741:	89 c6                	mov    %eax,%esi
    1743:	48 8b 15 c6 39 00 00 	mov    0x39c6(%rip),%rdx        # 5110 <rows>
    174a:	48 8b 05 b7 39 00 00 	mov    0x39b7(%rip),%rax        # 5108 <columns>
    1751:	48 0f af c2          	imul   %rdx,%rax
    1755:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    1759:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    175d:	48 01 d0             	add    %rdx,%rax
    1760:	0f b6 00             	movzbl (%rax),%eax
    1763:	21 f0                	and    %esi,%eax
    1765:	09 c1                	or     %eax,%ecx
    1767:	48 8b 15 a2 39 00 00 	mov    0x39a2(%rip),%rdx        # 5110 <rows>
    176e:	48 8b 05 93 39 00 00 	mov    0x3993(%rip),%rax        # 5108 <columns>
    1775:	48 0f af c2          	imul   %rdx,%rax
    1779:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    177d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1781:	48 01 d0             	add    %rdx,%rax
    1784:	89 ca                	mov    %ecx,%edx
    1786:	88 10                	mov    %dl,(%rax)
}
    1788:	90                   	nop
    1789:	5d                   	pop    %rbp
    178a:	c3                   	ret    

000000000000178b <calculate_left_right>:

void calculate_left_right(u_int8_t *state, u_int8_t *state_old) {
    178b:	55                   	push   %rbp
    178c:	48 89 e5             	mov    %rsp,%rbp
    178f:	48 83 ec 30          	sub    $0x30,%rsp
    1793:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    1797:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
#pragma omp parallel for schedule(runtime)
    179b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    179f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    17a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    17a7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    17ab:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    17af:	b9 00 00 00 00       	mov    $0x0,%ecx
    17b4:	ba 00 00 00 00       	mov    $0x0,%edx
    17b9:	48 89 c6             	mov    %rax,%rsi
    17bc:	48 8d 05 8c 09 00 00 	lea    0x98c(%rip),%rax        # 214f <calculate_left_right._omp_fn.0>
    17c3:	48 89 c7             	mov    %rax,%rdi
    17c6:	e8 e5 f9 ff ff       	call   11b0 <GOMP_parallel@plt>
                                 state_old[(i - 1) * columns] +
                                 state_old[i * columns] +
                                 state_old[(i + 1) * columns];
        state[(i + 1) * columns - 1] = (sum_of_r_edge == 3) | ((sum_of_r_edge == 2) & state_old[(i + 1) * columns - 1]);
    }
}
    17cb:	90                   	nop
    17cc:	c9                   	leave  
    17cd:	c3                   	ret    

00000000000017ce <calculate_top_bottom>:

void calculate_top_bottom(u_int8_t *state, u_int8_t *state_old) {
    17ce:	55                   	push   %rbp
    17cf:	48 89 e5             	mov    %rsp,%rbp
    17d2:	48 83 ec 30          	sub    $0x30,%rsp
    17d6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    17da:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
#pragma omp parallel for schedule(runtime)
    17de:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    17e2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    17e6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    17ea:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    17ee:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    17f2:	b9 00 00 00 00       	mov    $0x0,%ecx
    17f7:	ba 00 00 00 00       	mov    $0x0,%edx
    17fc:	48 89 c6             	mov    %rax,%rsi
    17ff:	48 8d 05 a4 0c 00 00 	lea    0xca4(%rip),%rax        # 24aa <calculate_top_bottom._omp_fn.0>
    1806:	48 89 c7             	mov    %rax,%rdi
    1809:	e8 a2 f9 ff ff       	call   11b0 <GOMP_parallel@plt>
                                 state_old[i - 1] +
                                 state_old[i + 1];
        state[(rows - 1) * columns + i] =
                (sum_of_b_edge == 3) | ((sum_of_b_edge == 2) & state_old[(rows - 1) * columns + i]);
    }
}
    180e:	90                   	nop
    180f:	c9                   	leave  
    1810:	c3                   	ret    

0000000000001811 <calculate_next_gen>:

void calculate_next_gen(u_int8_t *state, u_int8_t *state_old) {
    1811:	55                   	push   %rbp
    1812:	48 89 e5             	mov    %rsp,%rbp
    1815:	48 83 ec 30          	sub    $0x30,%rsp
    1819:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    181d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    //i = row, j = column

    // corners
    calculate_corners(state, state_old);
    1821:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    1825:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1829:	48 89 d6             	mov    %rdx,%rsi
    182c:	48 89 c7             	mov    %rax,%rdi
    182f:	e8 bc fa ff ff       	call   12f0 <calculate_corners>
    // left and right edge
    calculate_left_right(state, state_old);
    1834:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    1838:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    183c:	48 89 d6             	mov    %rdx,%rsi
    183f:	48 89 c7             	mov    %rax,%rdi
    1842:	e8 44 ff ff ff       	call   178b <calculate_left_right>
    // top and bottom edge
    calculate_top_bottom(state, state_old);
    1847:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    184b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    184f:	48 89 d6             	mov    %rdx,%rsi
    1852:	48 89 c7             	mov    %rax,%rdi
    1855:	e8 74 ff ff ff       	call   17ce <calculate_top_bottom>
    // middle
#pragma omp parallel for schedule(runtime)
    185a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    185e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    1862:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1866:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    186a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    186e:	b9 00 00 00 00       	mov    $0x0,%ecx
    1873:	ba 00 00 00 00       	mov    $0x0,%edx
    1878:	48 89 c6             	mov    %rax,%rsi
    187b:	48 8d 05 8b 0f 00 00 	lea    0xf8b(%rip),%rax        # 280d <calculate_next_gen._omp_fn.0>
    1882:	48 89 c7             	mov    %rax,%rdi
    1885:	e8 26 f9 ff ff       	call   11b0 <GOMP_parallel@plt>
                                state_old[(i + 1) * columns + j] +
                                state_old[(i + 1) * columns + (j + 1)];
            state[i * columns + j] = (sum_of_8 == 3) | ((sum_of_8 == 2) & state_old[i * columns + j]);
        }
    }
    return;
    188a:	90                   	nop
}
    188b:	c9                   	leave  
    188c:	c3                   	ret    

000000000000188d <write_pbm_file>:

void write_pbm_file(u_int8_t *state, int i) {
    188d:	55                   	push   %rbp
    188e:	48 89 e5             	mov    %rsp,%rbp
    1891:	48 83 ec 70          	sub    $0x70,%rsp
    1895:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
    1899:	89 75 94             	mov    %esi,-0x6c(%rbp)
    FILE *fptr;
    char new_filename[65];
    sprintf(new_filename, "%s%06d.pbm", output_fname, i);
    189c:	8b 55 94             	mov    -0x6c(%rbp),%edx
    189f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    18a3:	89 d1                	mov    %edx,%ecx
    18a5:	48 8d 15 74 38 00 00 	lea    0x3874(%rip),%rdx        # 5120 <output_fname>
    18ac:	48 8d 35 7b 17 00 00 	lea    0x177b(%rip),%rsi        # 302e <_IO_stdin_used+0x2e>
    18b3:	48 89 c7             	mov    %rax,%rdi
    18b6:	b8 00 00 00 00       	mov    $0x0,%eax
    18bb:	e8 b0 f8 ff ff       	call   1170 <sprintf@plt>
    fptr = fopen(new_filename, "w");
    18c0:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    18c4:	48 8d 15 6e 17 00 00 	lea    0x176e(%rip),%rdx        # 3039 <_IO_stdin_used+0x39>
    18cb:	48 89 d6             	mov    %rdx,%rsi
    18ce:	48 89 c7             	mov    %rax,%rdi
    18d1:	e8 6a f8 ff ff       	call   1140 <fopen@plt>
    18d6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    fprintf(fptr, "P1\n");
    18da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    18de:	48 89 c1             	mov    %rax,%rcx
    18e1:	ba 03 00 00 00       	mov    $0x3,%edx
    18e6:	be 01 00 00 00       	mov    $0x1,%esi
    18eb:	48 8d 05 49 17 00 00 	lea    0x1749(%rip),%rax        # 303b <_IO_stdin_used+0x3b>
    18f2:	48 89 c7             	mov    %rax,%rdi
    18f5:	e8 96 f8 ff ff       	call   1190 <fwrite@plt>
    fprintf(fptr, "# This is the %06d result. Have fun :)\n", i);
    18fa:	8b 55 94             	mov    -0x6c(%rbp),%edx
    18fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1901:	48 8d 0d 38 17 00 00 	lea    0x1738(%rip),%rcx        # 3040 <_IO_stdin_used+0x40>
    1908:	48 89 ce             	mov    %rcx,%rsi
    190b:	48 89 c7             	mov    %rax,%rdi
    190e:	b8 00 00 00 00       	mov    $0x0,%eax
    1913:	e8 c8 f7 ff ff       	call   10e0 <fprintf@plt>
    fprintf(fptr, "%lu %lu\n", columns, rows);
    1918:	48 8b 0d f1 37 00 00 	mov    0x37f1(%rip),%rcx        # 5110 <rows>
    191f:	48 8b 15 e2 37 00 00 	mov    0x37e2(%rip),%rdx        # 5108 <columns>
    1926:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    192a:	48 8d 35 37 17 00 00 	lea    0x1737(%rip),%rsi        # 3068 <_IO_stdin_used+0x68>
    1931:	48 89 c7             	mov    %rax,%rdi
    1934:	b8 00 00 00 00       	mov    $0x0,%eax
    1939:	e8 a2 f7 ff ff       	call   10e0 <fprintf@plt>
    for (int i = 0; i < rows; i++) {
    193e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    1945:	eb 75                	jmp    19bc <write_pbm_file+0x12f>
        for (int j = 0; j < columns; j++) {
    1947:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
    194e:	eb 45                	jmp    1995 <write_pbm_file+0x108>
            fprintf(fptr, "%d ", state[i * columns + j]);
    1950:	8b 45 fc             	mov    -0x4(%rbp),%eax
    1953:	48 63 d0             	movslq %eax,%rdx
    1956:	48 8b 05 ab 37 00 00 	mov    0x37ab(%rip),%rax        # 5108 <columns>
    195d:	48 0f af d0          	imul   %rax,%rdx
    1961:	8b 45 f8             	mov    -0x8(%rbp),%eax
    1964:	48 98                	cltq   
    1966:	48 01 c2             	add    %rax,%rdx
    1969:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    196d:	48 01 d0             	add    %rdx,%rax
    1970:	0f b6 00             	movzbl (%rax),%eax
    1973:	0f b6 d0             	movzbl %al,%edx
    1976:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    197a:	48 8d 0d f0 16 00 00 	lea    0x16f0(%rip),%rcx        # 3071 <_IO_stdin_used+0x71>
    1981:	48 89 ce             	mov    %rcx,%rsi
    1984:	48 89 c7             	mov    %rax,%rdi
    1987:	b8 00 00 00 00       	mov    $0x0,%eax
    198c:	e8 4f f7 ff ff       	call   10e0 <fprintf@plt>
        for (int j = 0; j < columns; j++) {
    1991:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
    1995:	8b 45 f8             	mov    -0x8(%rbp),%eax
    1998:	48 63 d0             	movslq %eax,%rdx
    199b:	48 8b 05 66 37 00 00 	mov    0x3766(%rip),%rax        # 5108 <columns>
    19a2:	48 39 c2             	cmp    %rax,%rdx
    19a5:	72 a9                	jb     1950 <write_pbm_file+0xc3>
        }
        fprintf(fptr, "\n");
    19a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    19ab:	48 89 c6             	mov    %rax,%rsi
    19ae:	bf 0a 00 00 00       	mov    $0xa,%edi
    19b3:	e8 18 f7 ff ff       	call   10d0 <fputc@plt>
    for (int i = 0; i < rows; i++) {
    19b8:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
    19bc:	8b 45 fc             	mov    -0x4(%rbp),%eax
    19bf:	48 63 d0             	movslq %eax,%rdx
    19c2:	48 8b 05 47 37 00 00 	mov    0x3747(%rip),%rax        # 5110 <rows>
    19c9:	48 39 c2             	cmp    %rax,%rdx
    19cc:	0f 82 75 ff ff ff    	jb     1947 <write_pbm_file+0xba>
    }
    fclose(fptr);
    19d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    19d6:	48 89 c7             	mov    %rax,%rdi
    19d9:	e8 72 f6 ff ff       	call   1050 <fclose@plt>
    return;
    19de:	90                   	nop
}
    19df:	c9                   	leave  
    19e0:	c3                   	ret    

00000000000019e1 <argments>:


void argments(int argc, char *argv[]) {
    19e1:	55                   	push   %rbp
    19e2:	48 89 e5             	mov    %rsp,%rbp
    19e5:	48 81 ec 20 01 00 00 	sub    $0x120,%rsp
    19ec:	89 bd ec fe ff ff    	mov    %edi,-0x114(%rbp)
    19f2:	48 89 b5 e0 fe ff ff 	mov    %rsi,-0x120(%rbp)
    int opt;
    while ((opt = getopt_long(argc, argv, "hpR:s:o:", long_options, NULL)) != -1) {
    19f9:	e9 33 02 00 00       	jmp    1c31 <argments+0x250>
        switch (opt) {
    19fe:	8b 45 fc             	mov    -0x4(%rbp),%eax
    1a01:	83 e8 52             	sub    $0x52,%eax
    1a04:	83 f8 21             	cmp    $0x21,%eax
    1a07:	0f 87 24 02 00 00    	ja     1c31 <argments+0x250>
    1a0d:	89 c0                	mov    %eax,%eax
    1a0f:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
    1a16:	00 
    1a17:	48 8d 05 7a 18 00 00 	lea    0x187a(%rip),%rax        # 3298 <_IO_stdin_used+0x298>
    1a1e:	8b 04 02             	mov    (%rdx,%rax,1),%eax
    1a21:	48 98                	cltq   
    1a23:	48 8d 15 6e 18 00 00 	lea    0x186e(%rip),%rdx        # 3298 <_IO_stdin_used+0x298>
    1a2a:	48 01 d0             	add    %rdx,%rax
    1a2d:	ff e0                	jmp    *%rax
            case 'R':
                if (strlen(optarg) > 254) {
    1a2f:	48 8b 05 aa 38 00 00 	mov    0x38aa(%rip),%rax        # 52e0 <optarg@@GLIBC_2.2.5>
    1a36:	48 89 c7             	mov    %rax,%rdi
    1a39:	e8 32 f6 ff ff       	call   1070 <strlen@plt>
    1a3e:	48 3d fe 00 00 00    	cmp    $0xfe,%rax
    1a44:	76 19                	jbe    1a5f <argments+0x7e>
                    printf("Given repetitions too large.\n");
    1a46:	48 8d 05 28 16 00 00 	lea    0x1628(%rip),%rax        # 3075 <_IO_stdin_used+0x75>
    1a4d:	48 89 c7             	mov    %rax,%rdi
    1a50:	e8 db f5 ff ff       	call   1030 <puts@plt>
                    exit(1);
    1a55:	bf 01 00 00 00       	mov    $0x1,%edi
    1a5a:	e8 21 f7 ff ff       	call   1180 <exit@plt>
                }
                repetitions = atoi(optarg);
    1a5f:	48 8b 05 7a 38 00 00 	mov    0x387a(%rip),%rax        # 52e0 <optarg@@GLIBC_2.2.5>
    1a66:	48 89 c7             	mov    %rax,%rdi
    1a69:	e8 f2 f6 ff ff       	call   1160 <atoi@plt>
    1a6e:	89 05 8c 36 00 00    	mov    %eax,0x368c(%rip)        # 5100 <repetitions>
                break;
    1a74:	e9 b8 01 00 00       	jmp    1c31 <argments+0x250>
            case 'o':
                printf("%s", optarg);
    1a79:	48 8b 05 60 38 00 00 	mov    0x3860(%rip),%rax        # 52e0 <optarg@@GLIBC_2.2.5>
    1a80:	48 89 c6             	mov    %rax,%rsi
    1a83:	48 8d 05 08 16 00 00 	lea    0x1608(%rip),%rax        # 3092 <_IO_stdin_used+0x92>
    1a8a:	48 89 c7             	mov    %rax,%rdi
    1a8d:	b8 00 00 00 00       	mov    $0x0,%eax
    1a92:	e8 09 f6 ff ff       	call   10a0 <printf@plt>
                if (strlen(optarg) > 254) {
    1a97:	48 8b 05 42 38 00 00 	mov    0x3842(%rip),%rax        # 52e0 <optarg@@GLIBC_2.2.5>
    1a9e:	48 89 c7             	mov    %rax,%rdi
    1aa1:	e8 ca f5 ff ff       	call   1070 <strlen@plt>
    1aa6:	48 3d fe 00 00 00    	cmp    $0xfe,%rax
    1aac:	76 19                	jbe    1ac7 <argments+0xe6>
                    printf("Output filename too big.\n");
    1aae:	48 8d 05 e0 15 00 00 	lea    0x15e0(%rip),%rax        # 3095 <_IO_stdin_used+0x95>
    1ab5:	48 89 c7             	mov    %rax,%rdi
    1ab8:	e8 73 f5 ff ff       	call   1030 <puts@plt>
                    exit(1);
    1abd:	bf 01 00 00 00       	mov    $0x1,%edi
    1ac2:	e8 b9 f6 ff ff       	call   1180 <exit@plt>
                }
                sprintf(output_fname, "%s", optarg);
    1ac7:	48 8b 05 12 38 00 00 	mov    0x3812(%rip),%rax        # 52e0 <optarg@@GLIBC_2.2.5>
    1ace:	48 89 c2             	mov    %rax,%rdx
    1ad1:	48 8d 05 ba 15 00 00 	lea    0x15ba(%rip),%rax        # 3092 <_IO_stdin_used+0x92>
    1ad8:	48 89 c6             	mov    %rax,%rsi
    1adb:	48 8d 05 3e 36 00 00 	lea    0x363e(%rip),%rax        # 5120 <output_fname>
    1ae2:	48 89 c7             	mov    %rax,%rdi
    1ae5:	b8 00 00 00 00       	mov    $0x0,%eax
    1aea:	e8 81 f6 ff ff       	call   1170 <sprintf@plt>
                produce_output = 1;
    1aef:	c6 05 f4 37 00 00 01 	movb   $0x1,0x37f4(%rip)        # 52ea <produce_output>
                break;
    1af6:	e9 36 01 00 00       	jmp    1c31 <argments+0x250>
            case 'p':
                show_progress = 1;
    1afb:	c6 05 e7 37 00 00 01 	movb   $0x1,0x37e7(%rip)        # 52e9 <show_progress>
                break;
    1b02:	e9 2a 01 00 00       	jmp    1c31 <argments+0x250>
            case 's':
                if (strlen(optarg) > 254) {
    1b07:	48 8b 05 d2 37 00 00 	mov    0x37d2(%rip),%rax        # 52e0 <optarg@@GLIBC_2.2.5>
    1b0e:	48 89 c7             	mov    %rax,%rdi
    1b11:	e8 5a f5 ff ff       	call   1070 <strlen@plt>
    1b16:	48 3d fe 00 00 00    	cmp    $0xfe,%rax
    1b1c:	76 19                	jbe    1b37 <argments+0x156>
                    printf("Given size too large.\n");
    1b1e:	48 8d 05 89 15 00 00 	lea    0x1589(%rip),%rax        # 30ae <_IO_stdin_used+0xae>
    1b25:	48 89 c7             	mov    %rax,%rdi
    1b28:	e8 03 f5 ff ff       	call   1030 <puts@plt>
                    exit(1);
    1b2d:	bf 01 00 00 00       	mov    $0x1,%edi
    1b32:	e8 49 f6 ff ff       	call   1180 <exit@plt>
                }
                char size[255];
                sprintf(size, "%s", optarg);
    1b37:	48 8b 15 a2 37 00 00 	mov    0x37a2(%rip),%rdx        # 52e0 <optarg@@GLIBC_2.2.5>
    1b3e:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    1b45:	48 8d 0d 46 15 00 00 	lea    0x1546(%rip),%rcx        # 3092 <_IO_stdin_used+0x92>
    1b4c:	48 89 ce             	mov    %rcx,%rsi
    1b4f:	48 89 c7             	mov    %rax,%rdi
    1b52:	b8 00 00 00 00       	mov    $0x0,%eax
    1b57:	e8 14 f6 ff ff       	call   1170 <sprintf@plt>
                char *word = strtok(size, ",");
    1b5c:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    1b63:	48 8d 15 5a 15 00 00 	lea    0x155a(%rip),%rdx        # 30c4 <_IO_stdin_used+0xc4>
    1b6a:	48 89 d6             	mov    %rdx,%rsi
    1b6d:	48 89 c7             	mov    %rax,%rdi
    1b70:	e8 db f5 ff ff       	call   1150 <strtok@plt>
    1b75:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
                columns = strtol(word, NULL, 10);
    1b79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1b7d:	ba 0a 00 00 00       	mov    $0xa,%edx
    1b82:	be 00 00 00 00       	mov    $0x0,%esi
    1b87:	48 89 c7             	mov    %rax,%rdi
    1b8a:	e8 61 f5 ff ff       	call   10f0 <strtol@plt>
    1b8f:	48 89 05 72 35 00 00 	mov    %rax,0x3572(%rip)        # 5108 <columns>
                word = strtok(NULL, ",");
    1b96:	48 8d 05 27 15 00 00 	lea    0x1527(%rip),%rax        # 30c4 <_IO_stdin_used+0xc4>
    1b9d:	48 89 c6             	mov    %rax,%rsi
    1ba0:	bf 00 00 00 00       	mov    $0x0,%edi
    1ba5:	e8 a6 f5 ff ff       	call   1150 <strtok@plt>
    1baa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
                rows = strtol(word, NULL, 10);
    1bae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1bb2:	ba 0a 00 00 00       	mov    $0xa,%edx
    1bb7:	be 00 00 00 00       	mov    $0x0,%esi
    1bbc:	48 89 c7             	mov    %rax,%rdi
    1bbf:	e8 2c f5 ff ff       	call   10f0 <strtol@plt>
    1bc4:	48 89 05 45 35 00 00 	mov    %rax,0x3545(%rip)        # 5110 <rows>
                break;
    1bcb:	eb 64                	jmp    1c31 <argments+0x250>
            case 'h':
                printf("Welcome to the game of life!\nAvailable arguments:\n");
    1bcd:	48 8d 05 f4 14 00 00 	lea    0x14f4(%rip),%rax        # 30c8 <_IO_stdin_used+0xc8>
    1bd4:	48 89 c7             	mov    %rax,%rdi
    1bd7:	e8 54 f4 ff ff       	call   1030 <puts@plt>
                printf("-h, --help                 prints this help page and exits\n");
    1bdc:	48 8d 05 1d 15 00 00 	lea    0x151d(%rip),%rax        # 3100 <_IO_stdin_used+0x100>
    1be3:	48 89 c7             	mov    %rax,%rdi
    1be6:	e8 45 f4 ff ff       	call   1030 <puts@plt>
                printf("-o, --output [filename]    default: life_xxxxxx.pbm, provide an output filename\n");
    1beb:	48 8d 05 4e 15 00 00 	lea    0x154e(%rip),%rax        # 3140 <_IO_stdin_used+0x140>
    1bf2:	48 89 c7             	mov    %rax,%rdi
    1bf5:	e8 36 f4 ff ff       	call   1030 <puts@plt>
                printf("-p, --progress             default: false; prints progress on terminal\n");
    1bfa:	48 8d 05 8f 15 00 00 	lea    0x158f(%rip),%rax        # 3190 <_IO_stdin_used+0x190>
    1c01:	48 89 c7             	mov    %rax,%rdi
    1c04:	e8 27 f4 ff ff       	call   1030 <puts@plt>
                printf("-R, --repetitions [int]    default: 3 repetitions; specifies the number of images created\n");
    1c09:	48 8d 05 c8 15 00 00 	lea    0x15c8(%rip),%rax        # 31d8 <_IO_stdin_used+0x1d8>
    1c10:	48 89 c7             	mov    %rax,%rdi
    1c13:	e8 18 f4 ff ff       	call   1030 <puts@plt>
                printf("-s, --size <columns,rows>  default: 128x128; specifies the number of columns and rows\n");
    1c18:	48 8d 05 19 16 00 00 	lea    0x1619(%rip),%rax        # 3238 <_IO_stdin_used+0x238>
    1c1f:	48 89 c7             	mov    %rax,%rdi
    1c22:	e8 09 f4 ff ff       	call   1030 <puts@plt>
                exit(0);
    1c27:	bf 00 00 00 00       	mov    $0x0,%edi
    1c2c:	e8 4f f5 ff ff       	call   1180 <exit@plt>
    while ((opt = getopt_long(argc, argv, "hpR:s:o:", long_options, NULL)) != -1) {
    1c31:	48 8b b5 e0 fe ff ff 	mov    -0x120(%rbp),%rsi
    1c38:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
    1c3e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    1c44:	48 8d 15 d5 35 00 00 	lea    0x35d5(%rip),%rdx        # 5220 <long_options>
    1c4b:	48 89 d1             	mov    %rdx,%rcx
    1c4e:	48 8d 15 39 16 00 00 	lea    0x1639(%rip),%rdx        # 328e <_IO_stdin_used+0x28e>
    1c55:	89 c7                	mov    %eax,%edi
    1c57:	e8 34 f4 ff ff       	call   1090 <getopt_long@plt>
    1c5c:	89 45 fc             	mov    %eax,-0x4(%rbp)
    1c5f:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
    1c63:	0f 85 95 fd ff ff    	jne    19fe <argments+0x1d>
        }
    }
    return;
    1c69:	90                   	nop
}
    1c6a:	c9                   	leave  
    1c6b:	c3                   	ret    

0000000000001c6c <main>:

int main(int argc, char *argv[]) {
    1c6c:	55                   	push   %rbp
    1c6d:	48 89 e5             	mov    %rsp,%rbp
    1c70:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
    1c74:	89 7d 8c             	mov    %edi,-0x74(%rbp)
    1c77:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
    // arguments
    argments(argc, argv);
    1c7b:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
    1c7f:	8b 45 8c             	mov    -0x74(%rbp),%eax
    1c82:	48 89 d6             	mov    %rdx,%rsi
    1c85:	89 c7                	mov    %eax,%edi
    1c87:	e8 55 fd ff ff       	call   19e1 <argments>
    // welcome information
    printf("Welcome to the game of life!\n");
    1c8c:	48 8d 05 8d 16 00 00 	lea    0x168d(%rip),%rax        # 3320 <_IO_stdin_used+0x320>
    1c93:	48 89 c7             	mov    %rax,%rdi
    1c96:	e8 95 f3 ff ff       	call   1030 <puts@plt>
    // ignore output if no thread limit is specified
    printf("We are doing %d repetitions with %d thread(s)!\n", repetitions, omp_get_thread_limit());
    1c9b:	e8 00 f5 ff ff       	call   11a0 <omp_get_thread_limit@plt>
    1ca0:	89 c2                	mov    %eax,%edx
    1ca2:	8b 05 58 34 00 00    	mov    0x3458(%rip),%eax        # 5100 <repetitions>
    1ca8:	89 c6                	mov    %eax,%esi
    1caa:	48 8d 05 8f 16 00 00 	lea    0x168f(%rip),%rax        # 3340 <_IO_stdin_used+0x340>
    1cb1:	48 89 c7             	mov    %rax,%rdi
    1cb4:	b8 00 00 00 00       	mov    $0x0,%eax
    1cb9:	e8 e2 f3 ff ff       	call   10a0 <printf@plt>
    printf("Game size: Columns: %lu, Rows: %lu.\n", columns, rows);
    1cbe:	48 8b 15 4b 34 00 00 	mov    0x344b(%rip),%rdx        # 5110 <rows>
    1cc5:	48 8b 05 3c 34 00 00 	mov    0x343c(%rip),%rax        # 5108 <columns>
    1ccc:	48 89 c6             	mov    %rax,%rsi
    1ccf:	48 8d 05 9a 16 00 00 	lea    0x169a(%rip),%rax        # 3370 <_IO_stdin_used+0x370>
    1cd6:	48 89 c7             	mov    %rax,%rdi
    1cd9:	b8 00 00 00 00       	mov    $0x0,%eax
    1cde:	e8 bd f3 ff ff       	call   10a0 <printf@plt>
    printf("Starting now...\n");
    1ce3:	48 8d 05 ab 16 00 00 	lea    0x16ab(%rip),%rax        # 3395 <_IO_stdin_used+0x395>
    1cea:	48 89 c7             	mov    %rax,%rdi
    1ced:	e8 3e f3 ff ff       	call   1030 <puts@plt>
    // initializing states and pointers
    u_int8_t *state_1 = (u_int8_t *) malloc(columns * rows * sizeof(u_int8_t));
    1cf2:	48 8b 15 0f 34 00 00 	mov    0x340f(%rip),%rdx        # 5108 <columns>
    1cf9:	48 8b 05 10 34 00 00 	mov    0x3410(%rip),%rax        # 5110 <rows>
    1d00:	48 0f af c2          	imul   %rdx,%rax
    1d04:	48 89 c7             	mov    %rax,%rdi
    1d07:	e8 04 f4 ff ff       	call   1110 <malloc@plt>
    1d0c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    u_int8_t *state_2 = (u_int8_t *) malloc(columns * rows * sizeof(u_int8_t));
    1d10:	48 8b 15 f1 33 00 00 	mov    0x33f1(%rip),%rdx        # 5108 <columns>
    1d17:	48 8b 05 f2 33 00 00 	mov    0x33f2(%rip),%rax        # 5110 <rows>
    1d1e:	48 0f af c2          	imul   %rdx,%rax
    1d22:	48 89 c7             	mov    %rax,%rdi
    1d25:	e8 e6 f3 ff ff       	call   1110 <malloc@plt>
    1d2a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    u_int8_t *state_in = state_1;
    1d2e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1d32:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    u_int8_t *state_out = state_2;
    1d36:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    1d3a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    u_int8_t *state_tmp = NULL;
    1d3e:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    1d45:	00 
    // starting clock
    clock_t t;
    double time_rand;
    double time_calc = 0;
    1d46:	66 0f ef c0          	pxor   %xmm0,%xmm0
    1d4a:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
    double time_out = 0;
    1d4f:	66 0f ef c0          	pxor   %xmm0,%xmm0
    1d53:	f2 0f 11 45 e0       	movsd  %xmm0,-0x20(%rbp)
    double t_omp;
    double omp_rand;
    double omp_calc = 0;
    1d58:	66 0f ef c0          	pxor   %xmm0,%xmm0
    1d5c:	f2 0f 11 45 d8       	movsd  %xmm0,-0x28(%rbp)
    // filling with random numbers
    t = clock();
    1d61:	e8 da f2 ff ff       	call   1040 <clock@plt>
    1d66:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    t_omp = omp_get_wtime();
    1d6a:	e8 f1 f2 ff ff       	call   1060 <omp_get_wtime@plt>
    1d6f:	66 48 0f 7e c0       	movq   %xmm0,%rax
    1d74:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    field_initializer(state_1);
    1d78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1d7c:	48 89 c7             	mov    %rax,%rdi
    1d7f:	e8 35 f5 ff ff       	call   12b9 <field_initializer>
    omp_rand = omp_get_wtime() - t_omp;
    1d84:	e8 d7 f2 ff ff       	call   1060 <omp_get_wtime@plt>
    1d89:	66 48 0f 7e c0       	movq   %xmm0,%rax
    1d8e:	66 48 0f 6e c0       	movq   %rax,%xmm0
    1d93:	f2 0f 5c 45 a8       	subsd  -0x58(%rbp),%xmm0
    1d98:	f2 0f 11 45 a0       	movsd  %xmm0,-0x60(%rbp)
    t = clock() - t;
    1d9d:	e8 9e f2 ff ff       	call   1040 <clock@plt>
    1da2:	48 2b 45 b0          	sub    -0x50(%rbp),%rax
    1da6:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    time_rand = ((double) t) / CLOCKS_PER_SEC; // in seconds
    1daa:	66 0f ef c0          	pxor   %xmm0,%xmm0
    1dae:	f2 48 0f 2a 45 b0    	cvtsi2sdq -0x50(%rbp),%xmm0
    1db4:	f2 0f 10 0d 2c 17 00 	movsd  0x172c(%rip),%xmm1        # 34e8 <_IO_stdin_used+0x4e8>
    1dbb:	00 
    1dbc:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
    1dc0:	f2 0f 11 45 98       	movsd  %xmm0,-0x68(%rbp)
    // write random pattern as -1 file
    if (produce_output) {
    1dc5:	0f b6 05 1e 35 00 00 	movzbl 0x351e(%rip),%eax        # 52ea <produce_output>
    1dcc:	84 c0                	test   %al,%al
    1dce:	74 4b                	je     1e1b <main+0x1af>
        t = clock();
    1dd0:	e8 6b f2 ff ff       	call   1040 <clock@plt>
    1dd5:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
        write_pbm_file(state_in, -1);
    1dd9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1ddd:	be ff ff ff ff       	mov    $0xffffffff,%esi
    1de2:	48 89 c7             	mov    %rax,%rdi
    1de5:	e8 a3 fa ff ff       	call   188d <write_pbm_file>
        t = clock() - t;
    1dea:	e8 51 f2 ff ff       	call   1040 <clock@plt>
    1def:	48 2b 45 b0          	sub    -0x50(%rbp),%rax
    1df3:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
        time_out += ((double) t) / CLOCKS_PER_SEC;
    1df7:	66 0f ef c0          	pxor   %xmm0,%xmm0
    1dfb:	f2 48 0f 2a 45 b0    	cvtsi2sdq -0x50(%rbp),%xmm0
    1e01:	f2 0f 10 0d df 16 00 	movsd  0x16df(%rip),%xmm1        # 34e8 <_IO_stdin_used+0x4e8>
    1e08:	00 
    1e09:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
    1e0d:	f2 0f 10 4d e0       	movsd  -0x20(%rbp),%xmm1
    1e12:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
    1e16:	f2 0f 11 45 e0       	movsd  %xmm0,-0x20(%rbp)
    }
    //calculation
    for (int i = 0; i < repetitions; i++) {
    1e1b:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
    1e22:	e9 53 01 00 00       	jmp    1f7a <main+0x30e>
        t = clock();
    1e27:	e8 14 f2 ff ff       	call   1040 <clock@plt>
    1e2c:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
        t_omp = omp_get_wtime();
    1e30:	e8 2b f2 ff ff       	call   1060 <omp_get_wtime@plt>
    1e35:	66 48 0f 7e c0       	movq   %xmm0,%rax
    1e3a:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
        calculate_next_gen(state_out, state_in);
    1e3e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    1e42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1e46:	48 89 d6             	mov    %rdx,%rsi
    1e49:	48 89 c7             	mov    %rax,%rdi
    1e4c:	e8 c0 f9 ff ff       	call   1811 <calculate_next_gen>
        t_omp = omp_get_wtime() - t_omp;
    1e51:	e8 0a f2 ff ff       	call   1060 <omp_get_wtime@plt>
    1e56:	66 48 0f 7e c0       	movq   %xmm0,%rax
    1e5b:	66 48 0f 6e c0       	movq   %rax,%xmm0
    1e60:	f2 0f 5c 45 a8       	subsd  -0x58(%rbp),%xmm0
    1e65:	f2 0f 11 45 a8       	movsd  %xmm0,-0x58(%rbp)
        t = clock() - t;
    1e6a:	e8 d1 f1 ff ff       	call   1040 <clock@plt>
    1e6f:	48 2b 45 b0          	sub    -0x50(%rbp),%rax
    1e73:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
        omp_calc += t_omp;
    1e77:	f2 0f 10 45 d8       	movsd  -0x28(%rbp),%xmm0
    1e7c:	f2 0f 58 45 a8       	addsd  -0x58(%rbp),%xmm0
    1e81:	f2 0f 11 45 d8       	movsd  %xmm0,-0x28(%rbp)
        time_calc += ((double) t) / CLOCKS_PER_SEC;
    1e86:	66 0f ef c0          	pxor   %xmm0,%xmm0
    1e8a:	f2 48 0f 2a 45 b0    	cvtsi2sdq -0x50(%rbp),%xmm0
    1e90:	f2 0f 10 0d 50 16 00 	movsd  0x1650(%rip),%xmm1        # 34e8 <_IO_stdin_used+0x4e8>
    1e97:	00 
    1e98:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
    1e9c:	f2 0f 10 4d e8       	movsd  -0x18(%rbp),%xmm1
    1ea1:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
    1ea5:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
        state_tmp = state_in;
    1eaa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1eae:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
        state_in = state_out;
    1eb2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1eb6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        state_out = state_tmp;
    1eba:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    1ebe:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        if (show_progress) {
    1ec2:	0f b6 05 20 34 00 00 	movzbl 0x3420(%rip),%eax        # 52e9 <show_progress>
    1ec9:	84 c0                	test   %al,%al
    1ecb:	74 53                	je     1f20 <main+0x2b4>
            double percentage = 100.0 * (i + 1) / repetitions;
    1ecd:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    1ed0:	83 c0 01             	add    $0x1,%eax
    1ed3:	66 0f ef c9          	pxor   %xmm1,%xmm1
    1ed7:	f2 0f 2a c8          	cvtsi2sd %eax,%xmm1
    1edb:	f2 0f 10 05 0d 16 00 	movsd  0x160d(%rip),%xmm0        # 34f0 <_IO_stdin_used+0x4f0>
    1ee2:	00 
    1ee3:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
    1ee7:	8b 05 13 32 00 00    	mov    0x3213(%rip),%eax        # 5100 <repetitions>
    1eed:	66 0f ef c9          	pxor   %xmm1,%xmm1
    1ef1:	f2 0f 2a c8          	cvtsi2sd %eax,%xmm1
    1ef5:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
    1ef9:	f2 0f 11 45 90       	movsd  %xmm0,-0x70(%rbp)
            printf("%.1lf%c\n", percentage, 37);
    1efe:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    1f02:	be 25 00 00 00       	mov    $0x25,%esi
    1f07:	66 48 0f 6e c0       	movq   %rax,%xmm0
    1f0c:	48 8d 05 92 14 00 00 	lea    0x1492(%rip),%rax        # 33a5 <_IO_stdin_used+0x3a5>
    1f13:	48 89 c7             	mov    %rax,%rdi
    1f16:	b8 01 00 00 00       	mov    $0x1,%eax
    1f1b:	e8 80 f1 ff ff       	call   10a0 <printf@plt>
        }
        if (produce_output) {
    1f20:	0f b6 05 c3 33 00 00 	movzbl 0x33c3(%rip),%eax        # 52ea <produce_output>
    1f27:	84 c0                	test   %al,%al
    1f29:	74 4b                	je     1f76 <main+0x30a>
            t = clock();
    1f2b:	e8 10 f1 ff ff       	call   1040 <clock@plt>
    1f30:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
            write_pbm_file(state_in, i);
    1f34:	8b 55 d4             	mov    -0x2c(%rbp),%edx
    1f37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1f3b:	89 d6                	mov    %edx,%esi
    1f3d:	48 89 c7             	mov    %rax,%rdi
    1f40:	e8 48 f9 ff ff       	call   188d <write_pbm_file>
            t = clock() - t;
    1f45:	e8 f6 f0 ff ff       	call   1040 <clock@plt>
    1f4a:	48 2b 45 b0          	sub    -0x50(%rbp),%rax
    1f4e:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
            time_out += ((double) t) / CLOCKS_PER_SEC;
    1f52:	66 0f ef c0          	pxor   %xmm0,%xmm0
    1f56:	f2 48 0f 2a 45 b0    	cvtsi2sdq -0x50(%rbp),%xmm0
    1f5c:	f2 0f 10 0d 84 15 00 	movsd  0x1584(%rip),%xmm1        # 34e8 <_IO_stdin_used+0x4e8>
    1f63:	00 
    1f64:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
    1f68:	f2 0f 10 4d e0       	movsd  -0x20(%rbp),%xmm1
    1f6d:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
    1f71:	f2 0f 11 45 e0       	movsd  %xmm0,-0x20(%rbp)
    for (int i = 0; i < repetitions; i++) {
    1f76:	83 45 d4 01          	addl   $0x1,-0x2c(%rbp)
    1f7a:	8b 05 80 31 00 00    	mov    0x3180(%rip),%eax        # 5100 <repetitions>
    1f80:	39 45 d4             	cmp    %eax,-0x2c(%rbp)
    1f83:	0f 8c 9e fe ff ff    	jl     1e27 <main+0x1bb>
        }
    }
    printf("Field initializer took %f seconds to execute (all threads added).\n", time_rand);
    1f89:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    1f8d:	66 48 0f 6e c0       	movq   %rax,%xmm0
    1f92:	48 8d 05 17 14 00 00 	lea    0x1417(%rip),%rax        # 33b0 <_IO_stdin_used+0x3b0>
    1f99:	48 89 c7             	mov    %rax,%rdi
    1f9c:	b8 01 00 00 00       	mov    $0x1,%eax
    1fa1:	e8 fa f0 ff ff       	call   10a0 <printf@plt>
    printf("Field initializer took %f seconds to execute (real time).\n", omp_rand);
    1fa6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    1faa:	66 48 0f 6e c0       	movq   %rax,%xmm0
    1faf:	48 8d 05 42 14 00 00 	lea    0x1442(%rip),%rax        # 33f8 <_IO_stdin_used+0x3f8>
    1fb6:	48 89 c7             	mov    %rax,%rdi
    1fb9:	b8 01 00 00 00       	mov    $0x1,%eax
    1fbe:	e8 dd f0 ff ff       	call   10a0 <printf@plt>
    printf("Calculation took %f seconds to execute (all threads added).\n", time_calc);
    1fc3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1fc7:	66 48 0f 6e c0       	movq   %rax,%xmm0
    1fcc:	48 8d 05 65 14 00 00 	lea    0x1465(%rip),%rax        # 3438 <_IO_stdin_used+0x438>
    1fd3:	48 89 c7             	mov    %rax,%rdi
    1fd6:	b8 01 00 00 00       	mov    $0x1,%eax
    1fdb:	e8 c0 f0 ff ff       	call   10a0 <printf@plt>
    printf("Calculation took %f seconds to execute (real time).\n", omp_calc);
    1fe0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1fe4:	66 48 0f 6e c0       	movq   %rax,%xmm0
    1fe9:	48 8d 05 88 14 00 00 	lea    0x1488(%rip),%rax        # 3478 <_IO_stdin_used+0x478>
    1ff0:	48 89 c7             	mov    %rax,%rdi
    1ff3:	b8 01 00 00 00       	mov    $0x1,%eax
    1ff8:	e8 a3 f0 ff ff       	call   10a0 <printf@plt>
    printf("Writing pbm files took %f seconds to execute.\n", time_out);
    1ffd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    2001:	66 48 0f 6e c0       	movq   %rax,%xmm0
    2006:	48 8d 05 a3 14 00 00 	lea    0x14a3(%rip),%rax        # 34b0 <_IO_stdin_used+0x4b0>
    200d:	48 89 c7             	mov    %rax,%rdi
    2010:	b8 01 00 00 00       	mov    $0x1,%eax
    2015:	e8 86 f0 ff ff       	call   10a0 <printf@plt>
    printf("Done :)\n");
    201a:	48 8d 05 be 14 00 00 	lea    0x14be(%rip),%rax        # 34df <_IO_stdin_used+0x4df>
    2021:	48 89 c7             	mov    %rax,%rdi
    2024:	e8 07 f0 ff ff       	call   1030 <puts@plt>
    exit(0);
    2029:	bf 00 00 00 00       	mov    $0x0,%edi
    202e:	e8 4d f1 ff ff       	call   1180 <exit@plt>

0000000000002033 <field_initializer._omp_fn.0>:
#pragma omp parallel
    2033:	55                   	push   %rbp
    2034:	48 89 e5             	mov    %rsp,%rbp
    2037:	48 83 ec 40          	sub    $0x40,%rsp
    203b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    203f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    2043:	48 8b 00             	mov    (%rax),%rax
    2046:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        unsigned tid = pthread_self();
    204a:	e8 d1 f0 ff ff       	call   1120 <pthread_self@plt>
    204f:	89 45 f4             	mov    %eax,-0xc(%rbp)
        unsigned seed = time(0) + tid;
    2052:	bf 00 00 00 00       	mov    $0x0,%edi
    2057:	e8 a4 f0 ff ff       	call   1100 <time@plt>
    205c:	89 c2                	mov    %eax,%edx
    205e:	8b 45 f4             	mov    -0xc(%rbp),%eax
    2061:	01 d0                	add    %edx,%eax
    2063:	89 45 dc             	mov    %eax,-0x24(%rbp)
#pragma omp parallel for schedule(runtime)
    2066:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    206a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    206e:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
    2072:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    2076:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    207a:	b9 00 00 00 00       	mov    $0x0,%ecx
    207f:	ba 00 00 00 00       	mov    $0x0,%edx
    2084:	48 89 c6             	mov    %rax,%rsi
    2087:	48 8d 05 0a 00 00 00 	lea    0xa(%rip),%rax        # 2098 <field_initializer._omp_fn.1>
    208e:	48 89 c7             	mov    %rax,%rdi
    2091:	e8 1a f1 ff ff       	call   11b0 <GOMP_parallel@plt>
#pragma omp parallel
    2096:	c9                   	leave  
    2097:	c3                   	ret    

0000000000002098 <field_initializer._omp_fn.1>:
#pragma omp parallel for schedule(runtime)
    2098:	55                   	push   %rbp
    2099:	48 89 e5             	mov    %rsp,%rbp
    209c:	53                   	push   %rbx
    209d:	48 83 ec 38          	sub    $0x38,%rsp
    20a1:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    20a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    20a9:	48 8b 00             	mov    (%rax),%rax
    20ac:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        for (int i = 0; i < columns * rows; i++) {
    20b0:	48 8b 05 51 30 00 00 	mov    0x3051(%rip),%rax        # 5108 <columns>
    20b7:	89 c2                	mov    %eax,%edx
    20b9:	48 8b 05 50 30 00 00 	mov    0x3050(%rip),%rax        # 5110 <rows>
    20c0:	0f af c2             	imul   %edx,%eax
    20c3:	48 98                	cltq   
    20c5:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
    20c9:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    20cd:	49 89 c8             	mov    %rcx,%r8
    20d0:	48 89 d1             	mov    %rdx,%rcx
    20d3:	ba 01 00 00 00       	mov    $0x1,%edx
    20d8:	48 89 c6             	mov    %rax,%rsi
    20db:	bf 00 00 00 00       	mov    $0x0,%edi
    20e0:	e8 cb ef ff ff       	call   10b0 <GOMP_loop_maybe_nonmonotonic_runtime_start@plt>
    20e5:	84 c0                	test   %al,%al
    20e7:	74 5b                	je     2144 <field_initializer._omp_fn.1+0xac>
    20e9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    20ed:	89 45 ec             	mov    %eax,-0x14(%rbp)
    20f0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    20f4:	89 c3                	mov    %eax,%ebx
            state[i] = rand_r(&seed) % 2;
    20f6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    20fa:	48 8b 40 08          	mov    0x8(%rax),%rax
    20fe:	48 89 c7             	mov    %rax,%rdi
    2101:	e8 7a ef ff ff       	call   1080 <rand_r@plt>
    2106:	99                   	cltd   
    2107:	c1 ea 1f             	shr    $0x1f,%edx
    210a:	01 d0                	add    %edx,%eax
    210c:	83 e0 01             	and    $0x1,%eax
    210f:	29 d0                	sub    %edx,%eax
    2111:	89 c1                	mov    %eax,%ecx
    2113:	8b 45 ec             	mov    -0x14(%rbp),%eax
    2116:	48 63 d0             	movslq %eax,%rdx
    2119:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    211d:	48 01 d0             	add    %rdx,%rax
    2120:	89 ca                	mov    %ecx,%edx
    2122:	88 10                	mov    %dl,(%rax)
    2124:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
    2128:	39 5d ec             	cmp    %ebx,-0x14(%rbp)
    212b:	7c c9                	jl     20f6 <field_initializer._omp_fn.1+0x5e>
    212d:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx
    2131:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2135:	48 89 d6             	mov    %rdx,%rsi
    2138:	48 89 c7             	mov    %rax,%rdi
    213b:	e8 f0 ef ff ff       	call   1130 <GOMP_loop_maybe_nonmonotonic_runtime_next@plt>
    2140:	84 c0                	test   %al,%al
    2142:	75 a5                	jne    20e9 <field_initializer._omp_fn.1+0x51>
    2144:	e8 77 ef ff ff       	call   10c0 <GOMP_loop_end_nowait@plt>
#pragma omp parallel for schedule(runtime)
    2149:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    214d:	c9                   	leave  
    214e:	c3                   	ret    

000000000000214f <calculate_left_right._omp_fn.0>:
#pragma omp parallel for schedule(runtime)
    214f:	55                   	push   %rbp
    2150:	48 89 e5             	mov    %rsp,%rbp
    2153:	48 83 ec 40          	sub    $0x40,%rsp
    2157:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    215b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    215f:	48 8b 40 08          	mov    0x8(%rax),%rax
    2163:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    2167:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    216b:	48 8b 00             	mov    (%rax),%rax
    216e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    for (int i = 1; i < rows - 1; i++) {
    2172:	48 8b 05 97 2f 00 00 	mov    0x2f97(%rip),%rax        # 5110 <rows>
    2179:	48 83 e8 01          	sub    $0x1,%rax
    217d:	48 98                	cltq   
    217f:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
    2183:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    2187:	49 89 c8             	mov    %rcx,%r8
    218a:	48 89 d1             	mov    %rdx,%rcx
    218d:	ba 01 00 00 00       	mov    $0x1,%edx
    2192:	48 89 c6             	mov    %rax,%rsi
    2195:	bf 01 00 00 00       	mov    $0x1,%edi
    219a:	e8 11 ef ff ff       	call   10b0 <GOMP_loop_maybe_nonmonotonic_runtime_start@plt>
    219f:	84 c0                	test   %al,%al
    21a1:	0f 84 fc 02 00 00    	je     24a3 <calculate_left_right._omp_fn.0+0x354>
    21a7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    21ab:	89 45 fc             	mov    %eax,-0x4(%rbp)
    21ae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    21b2:	89 c1                	mov    %eax,%ecx
        u_int8_t sum_of_l_edge = state_old[i * columns + 1] +
    21b4:	8b 45 fc             	mov    -0x4(%rbp),%eax
    21b7:	48 63 d0             	movslq %eax,%rdx
    21ba:	48 8b 05 47 2f 00 00 	mov    0x2f47(%rip),%rax        # 5108 <columns>
    21c1:	48 0f af c2          	imul   %rdx,%rax
    21c5:	48 8d 50 01          	lea    0x1(%rax),%rdx
    21c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    21cd:	48 01 d0             	add    %rdx,%rax
    21d0:	0f b6 30             	movzbl (%rax),%esi
                                 state_old[(i - 1) * columns] +
    21d3:	8b 45 fc             	mov    -0x4(%rbp),%eax
    21d6:	83 e8 01             	sub    $0x1,%eax
    21d9:	48 63 d0             	movslq %eax,%rdx
    21dc:	48 8b 05 25 2f 00 00 	mov    0x2f25(%rip),%rax        # 5108 <columns>
    21e3:	48 0f af d0          	imul   %rax,%rdx
    21e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    21eb:	48 01 d0             	add    %rdx,%rax
    21ee:	0f b6 00             	movzbl (%rax),%eax
        u_int8_t sum_of_l_edge = state_old[i * columns + 1] +
    21f1:	01 c6                	add    %eax,%esi
                                 state_old[(i - 1) * columns + 1] +
    21f3:	8b 45 fc             	mov    -0x4(%rbp),%eax
    21f6:	83 e8 01             	sub    $0x1,%eax
    21f9:	48 63 d0             	movslq %eax,%rdx
    21fc:	48 8b 05 05 2f 00 00 	mov    0x2f05(%rip),%rax        # 5108 <columns>
    2203:	48 0f af c2          	imul   %rdx,%rax
    2207:	48 8d 50 01          	lea    0x1(%rax),%rdx
    220b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    220f:	48 01 d0             	add    %rdx,%rax
    2212:	0f b6 00             	movzbl (%rax),%eax
                                 state_old[(i - 1) * columns] +
    2215:	01 c6                	add    %eax,%esi
                                 state_old[(i + 1) * columns] +
    2217:	8b 45 fc             	mov    -0x4(%rbp),%eax
    221a:	83 c0 01             	add    $0x1,%eax
    221d:	48 63 d0             	movslq %eax,%rdx
    2220:	48 8b 05 e1 2e 00 00 	mov    0x2ee1(%rip),%rax        # 5108 <columns>
    2227:	48 0f af d0          	imul   %rax,%rdx
    222b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    222f:	48 01 d0             	add    %rdx,%rax
    2232:	0f b6 00             	movzbl (%rax),%eax
                                 state_old[(i - 1) * columns + 1] +
    2235:	01 c6                	add    %eax,%esi
                                 state_old[(i + 1) * columns + 1] +
    2237:	8b 45 fc             	mov    -0x4(%rbp),%eax
    223a:	83 c0 01             	add    $0x1,%eax
    223d:	48 63 d0             	movslq %eax,%rdx
    2240:	48 8b 05 c1 2e 00 00 	mov    0x2ec1(%rip),%rax        # 5108 <columns>
    2247:	48 0f af c2          	imul   %rdx,%rax
    224b:	48 8d 50 01          	lea    0x1(%rax),%rdx
    224f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2253:	48 01 d0             	add    %rdx,%rax
    2256:	0f b6 00             	movzbl (%rax),%eax
                                 state_old[(i + 1) * columns] +
    2259:	01 c6                	add    %eax,%esi
                                 state_old[i * columns - 1] +
    225b:	8b 45 fc             	mov    -0x4(%rbp),%eax
    225e:	48 63 d0             	movslq %eax,%rdx
    2261:	48 8b 05 a0 2e 00 00 	mov    0x2ea0(%rip),%rax        # 5108 <columns>
    2268:	48 0f af c2          	imul   %rdx,%rax
    226c:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    2270:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2274:	48 01 d0             	add    %rdx,%rax
    2277:	0f b6 00             	movzbl (%rax),%eax
                                 state_old[(i + 1) * columns + 1] +
    227a:	01 c6                	add    %eax,%esi
                                 state_old[(i + 1) * columns - 1] +
    227c:	8b 45 fc             	mov    -0x4(%rbp),%eax
    227f:	83 c0 01             	add    $0x1,%eax
    2282:	48 63 d0             	movslq %eax,%rdx
    2285:	48 8b 05 7c 2e 00 00 	mov    0x2e7c(%rip),%rax        # 5108 <columns>
    228c:	48 0f af c2          	imul   %rdx,%rax
    2290:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    2294:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2298:	48 01 d0             	add    %rdx,%rax
    229b:	0f b6 00             	movzbl (%rax),%eax
                                 state_old[i * columns - 1] +
    229e:	01 c6                	add    %eax,%esi
                                 state_old[(i + 2) * columns - 1];
    22a0:	8b 45 fc             	mov    -0x4(%rbp),%eax
    22a3:	83 c0 02             	add    $0x2,%eax
    22a6:	48 63 d0             	movslq %eax,%rdx
    22a9:	48 8b 05 58 2e 00 00 	mov    0x2e58(%rip),%rax        # 5108 <columns>
    22b0:	48 0f af c2          	imul   %rdx,%rax
    22b4:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    22b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    22bc:	48 01 d0             	add    %rdx,%rax
    22bf:	0f b6 00             	movzbl (%rax),%eax
        u_int8_t sum_of_l_edge = state_old[i * columns + 1] +
    22c2:	01 f0                	add    %esi,%eax
    22c4:	88 45 e7             	mov    %al,-0x19(%rbp)
        state[i * columns] = (sum_of_l_edge == 3) | ((sum_of_l_edge == 2) & state_old[i * columns]);
    22c7:	80 7d e7 03          	cmpb   $0x3,-0x19(%rbp)
    22cb:	0f 94 c0             	sete   %al
    22ce:	89 c6                	mov    %eax,%esi
    22d0:	80 7d e7 02          	cmpb   $0x2,-0x19(%rbp)
    22d4:	0f 94 c0             	sete   %al
    22d7:	89 c7                	mov    %eax,%edi
    22d9:	8b 45 fc             	mov    -0x4(%rbp),%eax
    22dc:	48 63 d0             	movslq %eax,%rdx
    22df:	48 8b 05 22 2e 00 00 	mov    0x2e22(%rip),%rax        # 5108 <columns>
    22e6:	48 0f af d0          	imul   %rax,%rdx
    22ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    22ee:	48 01 d0             	add    %rdx,%rax
    22f1:	0f b6 00             	movzbl (%rax),%eax
    22f4:	21 f8                	and    %edi,%eax
    22f6:	09 c6                	or     %eax,%esi
    22f8:	8b 45 fc             	mov    -0x4(%rbp),%eax
    22fb:	48 63 d0             	movslq %eax,%rdx
    22fe:	48 8b 05 03 2e 00 00 	mov    0x2e03(%rip),%rax        # 5108 <columns>
    2305:	48 0f af d0          	imul   %rax,%rdx
    2309:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    230d:	48 01 d0             	add    %rdx,%rax
    2310:	89 f2                	mov    %esi,%edx
    2312:	88 10                	mov    %dl,(%rax)
        u_int8_t sum_of_r_edge = state_old[(i + 1) * columns - 2] +
    2314:	8b 45 fc             	mov    -0x4(%rbp),%eax
    2317:	83 c0 01             	add    $0x1,%eax
    231a:	48 63 d0             	movslq %eax,%rdx
    231d:	48 8b 05 e4 2d 00 00 	mov    0x2de4(%rip),%rax        # 5108 <columns>
    2324:	48 0f af c2          	imul   %rdx,%rax
    2328:	48 8d 50 fe          	lea    -0x2(%rax),%rdx
    232c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2330:	48 01 d0             	add    %rdx,%rax
    2333:	0f b6 30             	movzbl (%rax),%esi
                                 state_old[i * columns - 2] +
    2336:	8b 45 fc             	mov    -0x4(%rbp),%eax
    2339:	48 63 d0             	movslq %eax,%rdx
    233c:	48 8b 05 c5 2d 00 00 	mov    0x2dc5(%rip),%rax        # 5108 <columns>
    2343:	48 0f af c2          	imul   %rdx,%rax
    2347:	48 8d 50 fe          	lea    -0x2(%rax),%rdx
    234b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    234f:	48 01 d0             	add    %rdx,%rax
    2352:	0f b6 00             	movzbl (%rax),%eax
        u_int8_t sum_of_r_edge = state_old[(i + 1) * columns - 2] +
    2355:	01 c6                	add    %eax,%esi
                                 state_old[i * columns - 1] +
    2357:	8b 45 fc             	mov    -0x4(%rbp),%eax
    235a:	48 63 d0             	movslq %eax,%rdx
    235d:	48 8b 05 a4 2d 00 00 	mov    0x2da4(%rip),%rax        # 5108 <columns>
    2364:	48 0f af c2          	imul   %rdx,%rax
    2368:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    236c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2370:	48 01 d0             	add    %rdx,%rax
    2373:	0f b6 00             	movzbl (%rax),%eax
                                 state_old[i * columns - 2] +
    2376:	01 c6                	add    %eax,%esi
                                 state_old[(i + 2) * columns - 2] +
    2378:	8b 45 fc             	mov    -0x4(%rbp),%eax
    237b:	83 c0 02             	add    $0x2,%eax
    237e:	48 63 d0             	movslq %eax,%rdx
    2381:	48 8b 05 80 2d 00 00 	mov    0x2d80(%rip),%rax        # 5108 <columns>
    2388:	48 0f af c2          	imul   %rdx,%rax
    238c:	48 8d 50 fe          	lea    -0x2(%rax),%rdx
    2390:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2394:	48 01 d0             	add    %rdx,%rax
    2397:	0f b6 00             	movzbl (%rax),%eax
                                 state_old[i * columns - 1] +
    239a:	01 c6                	add    %eax,%esi
                                 state_old[(i + 2) * columns - 1] +
    239c:	8b 45 fc             	mov    -0x4(%rbp),%eax
    239f:	83 c0 02             	add    $0x2,%eax
    23a2:	48 63 d0             	movslq %eax,%rdx
    23a5:	48 8b 05 5c 2d 00 00 	mov    0x2d5c(%rip),%rax        # 5108 <columns>
    23ac:	48 0f af c2          	imul   %rdx,%rax
    23b0:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    23b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    23b8:	48 01 d0             	add    %rdx,%rax
    23bb:	0f b6 00             	movzbl (%rax),%eax
                                 state_old[(i + 2) * columns - 2] +
    23be:	01 c6                	add    %eax,%esi
                                 state_old[(i - 1) * columns] +
    23c0:	8b 45 fc             	mov    -0x4(%rbp),%eax
    23c3:	83 e8 01             	sub    $0x1,%eax
    23c6:	48 63 d0             	movslq %eax,%rdx
    23c9:	48 8b 05 38 2d 00 00 	mov    0x2d38(%rip),%rax        # 5108 <columns>
    23d0:	48 0f af d0          	imul   %rax,%rdx
    23d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    23d8:	48 01 d0             	add    %rdx,%rax
    23db:	0f b6 00             	movzbl (%rax),%eax
                                 state_old[(i + 2) * columns - 1] +
    23de:	01 c6                	add    %eax,%esi
                                 state_old[i * columns] +
    23e0:	8b 45 fc             	mov    -0x4(%rbp),%eax
    23e3:	48 63 d0             	movslq %eax,%rdx
    23e6:	48 8b 05 1b 2d 00 00 	mov    0x2d1b(%rip),%rax        # 5108 <columns>
    23ed:	48 0f af d0          	imul   %rax,%rdx
    23f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    23f5:	48 01 d0             	add    %rdx,%rax
    23f8:	0f b6 00             	movzbl (%rax),%eax
                                 state_old[(i - 1) * columns] +
    23fb:	01 c6                	add    %eax,%esi
                                 state_old[(i + 1) * columns];
    23fd:	8b 45 fc             	mov    -0x4(%rbp),%eax
    2400:	83 c0 01             	add    $0x1,%eax
    2403:	48 63 d0             	movslq %eax,%rdx
    2406:	48 8b 05 fb 2c 00 00 	mov    0x2cfb(%rip),%rax        # 5108 <columns>
    240d:	48 0f af d0          	imul   %rax,%rdx
    2411:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2415:	48 01 d0             	add    %rdx,%rax
    2418:	0f b6 00             	movzbl (%rax),%eax
        u_int8_t sum_of_r_edge = state_old[(i + 1) * columns - 2] +
    241b:	01 f0                	add    %esi,%eax
    241d:	88 45 e6             	mov    %al,-0x1a(%rbp)
        state[(i + 1) * columns - 1] = (sum_of_r_edge == 3) | ((sum_of_r_edge == 2) & state_old[(i + 1) * columns - 1]);
    2420:	80 7d e6 03          	cmpb   $0x3,-0x1a(%rbp)
    2424:	0f 94 c0             	sete   %al
    2427:	89 c6                	mov    %eax,%esi
    2429:	80 7d e6 02          	cmpb   $0x2,-0x1a(%rbp)
    242d:	0f 94 c0             	sete   %al
    2430:	89 c7                	mov    %eax,%edi
    2432:	8b 45 fc             	mov    -0x4(%rbp),%eax
    2435:	83 c0 01             	add    $0x1,%eax
    2438:	48 63 d0             	movslq %eax,%rdx
    243b:	48 8b 05 c6 2c 00 00 	mov    0x2cc6(%rip),%rax        # 5108 <columns>
    2442:	48 0f af c2          	imul   %rdx,%rax
    2446:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    244a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    244e:	48 01 d0             	add    %rdx,%rax
    2451:	0f b6 00             	movzbl (%rax),%eax
    2454:	21 f8                	and    %edi,%eax
    2456:	09 c6                	or     %eax,%esi
    2458:	8b 45 fc             	mov    -0x4(%rbp),%eax
    245b:	83 c0 01             	add    $0x1,%eax
    245e:	48 63 d0             	movslq %eax,%rdx
    2461:	48 8b 05 a0 2c 00 00 	mov    0x2ca0(%rip),%rax        # 5108 <columns>
    2468:	48 0f af c2          	imul   %rdx,%rax
    246c:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    2470:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2474:	48 01 d0             	add    %rdx,%rax
    2477:	89 f2                	mov    %esi,%edx
    2479:	88 10                	mov    %dl,(%rax)
    247b:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
    247f:	39 4d fc             	cmp    %ecx,-0x4(%rbp)
    2482:	0f 8c 2c fd ff ff    	jl     21b4 <calculate_left_right._omp_fn.0+0x65>
    2488:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx
    248c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2490:	48 89 d6             	mov    %rdx,%rsi
    2493:	48 89 c7             	mov    %rax,%rdi
    2496:	e8 95 ec ff ff       	call   1130 <GOMP_loop_maybe_nonmonotonic_runtime_next@plt>
    249b:	84 c0                	test   %al,%al
    249d:	0f 85 04 fd ff ff    	jne    21a7 <calculate_left_right._omp_fn.0+0x58>
    24a3:	e8 18 ec ff ff       	call   10c0 <GOMP_loop_end_nowait@plt>
#pragma omp parallel for schedule(runtime)
    24a8:	c9                   	leave  
    24a9:	c3                   	ret    

00000000000024aa <calculate_top_bottom._omp_fn.0>:
#pragma omp parallel for schedule(runtime)
    24aa:	55                   	push   %rbp
    24ab:	48 89 e5             	mov    %rsp,%rbp
    24ae:	48 83 ec 40          	sub    $0x40,%rsp
    24b2:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    24b6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    24ba:	48 8b 40 08          	mov    0x8(%rax),%rax
    24be:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    24c2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    24c6:	48 8b 00             	mov    (%rax),%rax
    24c9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    for (int i = 1; i < columns - 1; i++) {
    24cd:	48 8b 05 34 2c 00 00 	mov    0x2c34(%rip),%rax        # 5108 <columns>
    24d4:	48 83 e8 01          	sub    $0x1,%rax
    24d8:	48 98                	cltq   
    24da:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
    24de:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    24e2:	49 89 c8             	mov    %rcx,%r8
    24e5:	48 89 d1             	mov    %rdx,%rcx
    24e8:	ba 01 00 00 00       	mov    $0x1,%edx
    24ed:	48 89 c6             	mov    %rax,%rsi
    24f0:	bf 01 00 00 00       	mov    $0x1,%edi
    24f5:	e8 b6 eb ff ff       	call   10b0 <GOMP_loop_maybe_nonmonotonic_runtime_start@plt>
    24fa:	84 c0                	test   %al,%al
    24fc:	0f 84 04 03 00 00    	je     2806 <calculate_top_bottom._omp_fn.0+0x35c>
    2502:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    2506:	89 45 fc             	mov    %eax,-0x4(%rbp)
    2509:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    250d:	89 c1                	mov    %eax,%ecx
        u_int8_t sum_of_t_edge = state_old[i - 1] +
    250f:	8b 45 fc             	mov    -0x4(%rbp),%eax
    2512:	48 98                	cltq   
    2514:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    2518:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    251c:	48 01 d0             	add    %rdx,%rax
    251f:	0f b6 10             	movzbl (%rax),%edx
                                 state_old[i + 1] +
    2522:	8b 45 fc             	mov    -0x4(%rbp),%eax
    2525:	48 98                	cltq   
    2527:	48 8d 70 01          	lea    0x1(%rax),%rsi
    252b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    252f:	48 01 f0             	add    %rsi,%rax
    2532:	0f b6 00             	movzbl (%rax),%eax
        u_int8_t sum_of_t_edge = state_old[i - 1] +
    2535:	01 c2                	add    %eax,%edx
                                 state_old[2 * columns + (i - 1)] +
    2537:	48 8b 05 ca 2b 00 00 	mov    0x2bca(%rip),%rax        # 5108 <columns>
    253e:	48 8d 34 00          	lea    (%rax,%rax,1),%rsi
    2542:	8b 45 fc             	mov    -0x4(%rbp),%eax
    2545:	83 e8 01             	sub    $0x1,%eax
    2548:	48 98                	cltq   
    254a:	48 01 c6             	add    %rax,%rsi
    254d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2551:	48 01 f0             	add    %rsi,%rax
    2554:	0f b6 00             	movzbl (%rax),%eax
                                 state_old[i + 1] +
    2557:	01 c2                	add    %eax,%edx
                                 state_old[2 * columns + i] +
    2559:	48 8b 05 a8 2b 00 00 	mov    0x2ba8(%rip),%rax        # 5108 <columns>
    2560:	48 8d 34 00          	lea    (%rax,%rax,1),%rsi
    2564:	8b 45 fc             	mov    -0x4(%rbp),%eax
    2567:	48 98                	cltq   
    2569:	48 01 c6             	add    %rax,%rsi
    256c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2570:	48 01 f0             	add    %rsi,%rax
    2573:	0f b6 00             	movzbl (%rax),%eax
                                 state_old[2 * columns + (i - 1)] +
    2576:	01 c2                	add    %eax,%edx
                                 state_old[2 * columns + (i + 1)] +
    2578:	48 8b 05 89 2b 00 00 	mov    0x2b89(%rip),%rax        # 5108 <columns>
    257f:	48 8d 34 00          	lea    (%rax,%rax,1),%rsi
    2583:	8b 45 fc             	mov    -0x4(%rbp),%eax
    2586:	83 c0 01             	add    $0x1,%eax
    2589:	48 98                	cltq   
    258b:	48 01 c6             	add    %rax,%rsi
    258e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2592:	48 01 f0             	add    %rsi,%rax
    2595:	0f b6 00             	movzbl (%rax),%eax
                                 state_old[2 * columns + i] +
    2598:	8d 34 02             	lea    (%rdx,%rax,1),%esi
                                 state_old[(rows - 1) * columns + i] +
    259b:	48 8b 05 6e 2b 00 00 	mov    0x2b6e(%rip),%rax        # 5110 <rows>
    25a2:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    25a6:	48 8b 05 5b 2b 00 00 	mov    0x2b5b(%rip),%rax        # 5108 <columns>
    25ad:	48 0f af d0          	imul   %rax,%rdx
    25b1:	8b 45 fc             	mov    -0x4(%rbp),%eax
    25b4:	48 98                	cltq   
    25b6:	48 01 c2             	add    %rax,%rdx
    25b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    25bd:	48 01 d0             	add    %rdx,%rax
    25c0:	0f b6 00             	movzbl (%rax),%eax
                                 state_old[2 * columns + (i + 1)] +
    25c3:	01 c6                	add    %eax,%esi
                                 state_old[(rows - 1) * columns + i + 1] +
    25c5:	48 8b 05 44 2b 00 00 	mov    0x2b44(%rip),%rax        # 5110 <rows>
    25cc:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    25d0:	48 8b 05 31 2b 00 00 	mov    0x2b31(%rip),%rax        # 5108 <columns>
    25d7:	48 0f af d0          	imul   %rax,%rdx
    25db:	8b 45 fc             	mov    -0x4(%rbp),%eax
    25de:	48 98                	cltq   
    25e0:	48 01 d0             	add    %rdx,%rax
    25e3:	48 8d 50 01          	lea    0x1(%rax),%rdx
    25e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    25eb:	48 01 d0             	add    %rdx,%rax
    25ee:	0f b6 00             	movzbl (%rax),%eax
                                 state_old[(rows - 1) * columns + i] +
    25f1:	01 c6                	add    %eax,%esi
                                 state_old[(rows - 1) * columns + i - 1];
    25f3:	48 8b 05 16 2b 00 00 	mov    0x2b16(%rip),%rax        # 5110 <rows>
    25fa:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    25fe:	48 8b 05 03 2b 00 00 	mov    0x2b03(%rip),%rax        # 5108 <columns>
    2605:	48 0f af d0          	imul   %rax,%rdx
    2609:	8b 45 fc             	mov    -0x4(%rbp),%eax
    260c:	48 98                	cltq   
    260e:	48 01 d0             	add    %rdx,%rax
    2611:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    2615:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2619:	48 01 d0             	add    %rdx,%rax
    261c:	0f b6 00             	movzbl (%rax),%eax
        u_int8_t sum_of_t_edge = state_old[i - 1] +
    261f:	01 f0                	add    %esi,%eax
    2621:	88 45 e7             	mov    %al,-0x19(%rbp)
        state[i] = (sum_of_t_edge == 3) | ((sum_of_t_edge == 2) & state_old[i]);
    2624:	80 7d e7 03          	cmpb   $0x3,-0x19(%rbp)
    2628:	0f 94 c0             	sete   %al
    262b:	89 c6                	mov    %eax,%esi
    262d:	80 7d e7 02          	cmpb   $0x2,-0x19(%rbp)
    2631:	0f 94 c0             	sete   %al
    2634:	89 c7                	mov    %eax,%edi
    2636:	8b 45 fc             	mov    -0x4(%rbp),%eax
    2639:	48 63 d0             	movslq %eax,%rdx
    263c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2640:	48 01 d0             	add    %rdx,%rax
    2643:	0f b6 00             	movzbl (%rax),%eax
    2646:	21 f8                	and    %edi,%eax
    2648:	09 c6                	or     %eax,%esi
    264a:	8b 45 fc             	mov    -0x4(%rbp),%eax
    264d:	48 63 d0             	movslq %eax,%rdx
    2650:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2654:	48 01 d0             	add    %rdx,%rax
    2657:	89 f2                	mov    %esi,%edx
    2659:	88 10                	mov    %dl,(%rax)
        u_int8_t sum_of_b_edge = state_old[(rows - 1) * columns + (i - 1)] +
    265b:	48 8b 05 ae 2a 00 00 	mov    0x2aae(%rip),%rax        # 5110 <rows>
    2662:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    2666:	48 8b 05 9b 2a 00 00 	mov    0x2a9b(%rip),%rax        # 5108 <columns>
    266d:	48 0f af d0          	imul   %rax,%rdx
    2671:	8b 45 fc             	mov    -0x4(%rbp),%eax
    2674:	83 e8 01             	sub    $0x1,%eax
    2677:	48 98                	cltq   
    2679:	48 01 c2             	add    %rax,%rdx
    267c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2680:	48 01 d0             	add    %rdx,%rax
    2683:	0f b6 30             	movzbl (%rax),%esi
                                 state_old[(rows - 1) * columns + (i + 1)] +
    2686:	48 8b 05 83 2a 00 00 	mov    0x2a83(%rip),%rax        # 5110 <rows>
    268d:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    2691:	48 8b 05 70 2a 00 00 	mov    0x2a70(%rip),%rax        # 5108 <columns>
    2698:	48 0f af d0          	imul   %rax,%rdx
    269c:	8b 45 fc             	mov    -0x4(%rbp),%eax
    269f:	83 c0 01             	add    $0x1,%eax
    26a2:	48 98                	cltq   
    26a4:	48 01 c2             	add    %rax,%rdx
    26a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    26ab:	48 01 d0             	add    %rdx,%rax
    26ae:	0f b6 00             	movzbl (%rax),%eax
        u_int8_t sum_of_b_edge = state_old[(rows - 1) * columns + (i - 1)] +
    26b1:	01 c6                	add    %eax,%esi
                                 state_old[(rows - 2) * columns + (i - 1)] +
    26b3:	48 8b 05 56 2a 00 00 	mov    0x2a56(%rip),%rax        # 5110 <rows>
    26ba:	48 8d 50 fe          	lea    -0x2(%rax),%rdx
    26be:	48 8b 05 43 2a 00 00 	mov    0x2a43(%rip),%rax        # 5108 <columns>
    26c5:	48 0f af d0          	imul   %rax,%rdx
    26c9:	8b 45 fc             	mov    -0x4(%rbp),%eax
    26cc:	83 e8 01             	sub    $0x1,%eax
    26cf:	48 98                	cltq   
    26d1:	48 01 c2             	add    %rax,%rdx
    26d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    26d8:	48 01 d0             	add    %rdx,%rax
    26db:	0f b6 00             	movzbl (%rax),%eax
                                 state_old[(rows - 1) * columns + (i + 1)] +
    26de:	01 c6                	add    %eax,%esi
                                 state_old[(rows - 2) * columns + i] +
    26e0:	48 8b 05 29 2a 00 00 	mov    0x2a29(%rip),%rax        # 5110 <rows>
    26e7:	48 8d 50 fe          	lea    -0x2(%rax),%rdx
    26eb:	48 8b 05 16 2a 00 00 	mov    0x2a16(%rip),%rax        # 5108 <columns>
    26f2:	48 0f af d0          	imul   %rax,%rdx
    26f6:	8b 45 fc             	mov    -0x4(%rbp),%eax
    26f9:	48 98                	cltq   
    26fb:	48 01 c2             	add    %rax,%rdx
    26fe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2702:	48 01 d0             	add    %rdx,%rax
    2705:	0f b6 00             	movzbl (%rax),%eax
                                 state_old[(rows - 2) * columns + (i - 1)] +
    2708:	01 c6                	add    %eax,%esi
                                 state_old[(rows - 2) * columns + (i + 1)] +
    270a:	48 8b 05 ff 29 00 00 	mov    0x29ff(%rip),%rax        # 5110 <rows>
    2711:	48 8d 50 fe          	lea    -0x2(%rax),%rdx
    2715:	48 8b 05 ec 29 00 00 	mov    0x29ec(%rip),%rax        # 5108 <columns>
    271c:	48 0f af d0          	imul   %rax,%rdx
    2720:	8b 45 fc             	mov    -0x4(%rbp),%eax
    2723:	83 c0 01             	add    $0x1,%eax
    2726:	48 98                	cltq   
    2728:	48 01 c2             	add    %rax,%rdx
    272b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    272f:	48 01 d0             	add    %rdx,%rax
    2732:	0f b6 00             	movzbl (%rax),%eax
                                 state_old[(rows - 2) * columns + i] +
    2735:	01 c6                	add    %eax,%esi
                                 state_old[i] +
    2737:	8b 45 fc             	mov    -0x4(%rbp),%eax
    273a:	48 63 d0             	movslq %eax,%rdx
    273d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2741:	48 01 d0             	add    %rdx,%rax
    2744:	0f b6 00             	movzbl (%rax),%eax
                                 state_old[(rows - 2) * columns + (i + 1)] +
    2747:	8d 14 06             	lea    (%rsi,%rax,1),%edx
                                 state_old[i - 1] +
    274a:	8b 45 fc             	mov    -0x4(%rbp),%eax
    274d:	48 98                	cltq   
    274f:	48 8d 70 ff          	lea    -0x1(%rax),%rsi
    2753:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2757:	48 01 f0             	add    %rsi,%rax
    275a:	0f b6 00             	movzbl (%rax),%eax
                                 state_old[i] +
    275d:	01 c2                	add    %eax,%edx
                                 state_old[i + 1];
    275f:	8b 45 fc             	mov    -0x4(%rbp),%eax
    2762:	48 98                	cltq   
    2764:	48 8d 70 01          	lea    0x1(%rax),%rsi
    2768:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    276c:	48 01 f0             	add    %rsi,%rax
    276f:	0f b6 00             	movzbl (%rax),%eax
        u_int8_t sum_of_b_edge = state_old[(rows - 1) * columns + (i - 1)] +
    2772:	01 d0                	add    %edx,%eax
    2774:	88 45 e6             	mov    %al,-0x1a(%rbp)
                (sum_of_b_edge == 3) | ((sum_of_b_edge == 2) & state_old[(rows - 1) * columns + i]);
    2777:	80 7d e6 03          	cmpb   $0x3,-0x1a(%rbp)
    277b:	0f 94 c0             	sete   %al
    277e:	89 c6                	mov    %eax,%esi
    2780:	80 7d e6 02          	cmpb   $0x2,-0x1a(%rbp)
    2784:	0f 94 c0             	sete   %al
    2787:	89 c7                	mov    %eax,%edi
    2789:	48 8b 05 80 29 00 00 	mov    0x2980(%rip),%rax        # 5110 <rows>
    2790:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    2794:	48 8b 05 6d 29 00 00 	mov    0x296d(%rip),%rax        # 5108 <columns>
    279b:	48 0f af d0          	imul   %rax,%rdx
    279f:	8b 45 fc             	mov    -0x4(%rbp),%eax
    27a2:	48 98                	cltq   
    27a4:	48 01 c2             	add    %rax,%rdx
    27a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    27ab:	48 01 d0             	add    %rdx,%rax
    27ae:	0f b6 00             	movzbl (%rax),%eax
    27b1:	21 f8                	and    %edi,%eax
    27b3:	09 c6                	or     %eax,%esi
        state[(rows - 1) * columns + i] =
    27b5:	48 8b 05 54 29 00 00 	mov    0x2954(%rip),%rax        # 5110 <rows>
    27bc:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    27c0:	48 8b 05 41 29 00 00 	mov    0x2941(%rip),%rax        # 5108 <columns>
    27c7:	48 0f af d0          	imul   %rax,%rdx
    27cb:	8b 45 fc             	mov    -0x4(%rbp),%eax
    27ce:	48 98                	cltq   
    27d0:	48 01 c2             	add    %rax,%rdx
    27d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    27d7:	48 01 d0             	add    %rdx,%rax
                (sum_of_b_edge == 3) | ((sum_of_b_edge == 2) & state_old[(rows - 1) * columns + i]);
    27da:	89 f2                	mov    %esi,%edx
        state[(rows - 1) * columns + i] =
    27dc:	88 10                	mov    %dl,(%rax)
    27de:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
    27e2:	39 4d fc             	cmp    %ecx,-0x4(%rbp)
    27e5:	0f 8c 24 fd ff ff    	jl     250f <calculate_top_bottom._omp_fn.0+0x65>
    27eb:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx
    27ef:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    27f3:	48 89 d6             	mov    %rdx,%rsi
    27f6:	48 89 c7             	mov    %rax,%rdi
    27f9:	e8 32 e9 ff ff       	call   1130 <GOMP_loop_maybe_nonmonotonic_runtime_next@plt>
    27fe:	84 c0                	test   %al,%al
    2800:	0f 85 fc fc ff ff    	jne    2502 <calculate_top_bottom._omp_fn.0+0x58>
    2806:	e8 b5 e8 ff ff       	call   10c0 <GOMP_loop_end_nowait@plt>
#pragma omp parallel for schedule(runtime)
    280b:	c9                   	leave  
    280c:	c3                   	ret    

000000000000280d <calculate_next_gen._omp_fn.0>:
#pragma omp parallel for schedule(runtime)
    280d:	55                   	push   %rbp
    280e:	48 89 e5             	mov    %rsp,%rbp
    2811:	41 54                	push   %r12
    2813:	53                   	push   %rbx
    2814:	48 83 ec 40          	sub    $0x40,%rsp
    2818:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    281c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    2820:	48 8b 40 08          	mov    0x8(%rax),%rax
    2824:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    2828:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    282c:	48 8b 00             	mov    (%rax),%rax
    282f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    for (int i = 1; i < rows - 1; i++) {
    2833:	48 8b 05 d6 28 00 00 	mov    0x28d6(%rip),%rax        # 5110 <rows>
    283a:	48 83 e8 01          	sub    $0x1,%rax
        for (int j = 1; j < columns - 1; j++) {
    283e:	48 8b 15 c3 28 00 00 	mov    0x28c3(%rip),%rdx        # 5108 <columns>
    2845:	48 83 ea 01          	sub    $0x1,%rdx
    2849:	41 89 d4             	mov    %edx,%r12d
    284c:	83 f8 01             	cmp    $0x1,%eax
    284f:	0f 8f 57 02 00 00    	jg     2aac <calculate_next_gen._omp_fn.0+0x29f>
    2855:	e9 48 02 00 00       	jmp    2aa2 <calculate_next_gen._omp_fn.0+0x295>
    285a:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
    285e:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    2862:	49 89 c8             	mov    %rcx,%r8
    2865:	48 89 d1             	mov    %rdx,%rcx
    2868:	ba 01 00 00 00       	mov    $0x1,%edx
    286d:	48 89 c6             	mov    %rax,%rsi
    2870:	bf 00 00 00 00       	mov    $0x0,%edi
    2875:	e8 36 e8 ff ff       	call   10b0 <GOMP_loop_maybe_nonmonotonic_runtime_start@plt>
    287a:	84 c0                	test   %al,%al
    287c:	75 0a                	jne    2888 <calculate_next_gen._omp_fn.0+0x7b>
    287e:	e8 3d e8 ff ff       	call   10c0 <GOMP_loop_end_nowait@plt>
    2883:	e9 40 02 00 00       	jmp    2ac8 <calculate_next_gen._omp_fn.0+0x2bb>
    2888:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    288c:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    2890:	48 89 c8             	mov    %rcx,%rax
    2893:	48 99                	cqto   
    2895:	48 f7 fb             	idiv   %rbx
    2898:	48 89 d0             	mov    %rdx,%rax
    289b:	83 c0 01             	add    $0x1,%eax
    289e:	89 45 ec             	mov    %eax,-0x14(%rbp)
    28a1:	48 89 c8             	mov    %rcx,%rax
    28a4:	48 99                	cqto   
    28a6:	48 f7 fb             	idiv   %rbx
    28a9:	83 c0 01             	add    $0x1,%eax
    28ac:	89 45 e8             	mov    %eax,-0x18(%rbp)
            u_int8_t sum_of_8 = state_old[(i - 1) * columns + (j - 1)] +
    28af:	8b 45 e8             	mov    -0x18(%rbp),%eax
    28b2:	83 e8 01             	sub    $0x1,%eax
    28b5:	48 63 d0             	movslq %eax,%rdx
    28b8:	48 8b 05 49 28 00 00 	mov    0x2849(%rip),%rax        # 5108 <columns>
    28bf:	48 0f af d0          	imul   %rax,%rdx
    28c3:	8b 45 ec             	mov    -0x14(%rbp),%eax
    28c6:	83 e8 01             	sub    $0x1,%eax
    28c9:	48 98                	cltq   
    28cb:	48 01 c2             	add    %rax,%rdx
    28ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    28d2:	48 01 d0             	add    %rdx,%rax
    28d5:	0f b6 38             	movzbl (%rax),%edi
                                state_old[(i - 1) * columns + j] +
    28d8:	8b 45 e8             	mov    -0x18(%rbp),%eax
    28db:	83 e8 01             	sub    $0x1,%eax
    28de:	48 63 d0             	movslq %eax,%rdx
    28e1:	48 8b 05 20 28 00 00 	mov    0x2820(%rip),%rax        # 5108 <columns>
    28e8:	48 0f af d0          	imul   %rax,%rdx
    28ec:	8b 45 ec             	mov    -0x14(%rbp),%eax
    28ef:	48 98                	cltq   
    28f1:	48 01 c2             	add    %rax,%rdx
    28f4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    28f8:	48 01 d0             	add    %rdx,%rax
    28fb:	0f b6 00             	movzbl (%rax),%eax
            u_int8_t sum_of_8 = state_old[(i - 1) * columns + (j - 1)] +
    28fe:	01 c7                	add    %eax,%edi
                                state_old[(i - 1) * columns + (j + 1)] +
    2900:	8b 45 e8             	mov    -0x18(%rbp),%eax
    2903:	83 e8 01             	sub    $0x1,%eax
    2906:	48 63 d0             	movslq %eax,%rdx
    2909:	48 8b 05 f8 27 00 00 	mov    0x27f8(%rip),%rax        # 5108 <columns>
    2910:	48 0f af d0          	imul   %rax,%rdx
    2914:	8b 45 ec             	mov    -0x14(%rbp),%eax
    2917:	83 c0 01             	add    $0x1,%eax
    291a:	48 98                	cltq   
    291c:	48 01 c2             	add    %rax,%rdx
    291f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    2923:	48 01 d0             	add    %rdx,%rax
    2926:	0f b6 00             	movzbl (%rax),%eax
                                state_old[(i - 1) * columns + j] +
    2929:	01 c7                	add    %eax,%edi
                                state_old[i * columns + (j - 1)] +
    292b:	8b 45 e8             	mov    -0x18(%rbp),%eax
    292e:	48 63 d0             	movslq %eax,%rdx
    2931:	48 8b 05 d0 27 00 00 	mov    0x27d0(%rip),%rax        # 5108 <columns>
    2938:	48 0f af d0          	imul   %rax,%rdx
    293c:	8b 45 ec             	mov    -0x14(%rbp),%eax
    293f:	83 e8 01             	sub    $0x1,%eax
    2942:	48 98                	cltq   
    2944:	48 01 c2             	add    %rax,%rdx
    2947:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    294b:	48 01 d0             	add    %rdx,%rax
    294e:	0f b6 00             	movzbl (%rax),%eax
                                state_old[(i - 1) * columns + (j + 1)] +
    2951:	01 c7                	add    %eax,%edi
                                state_old[i * columns + (j + 1)] +
    2953:	8b 45 e8             	mov    -0x18(%rbp),%eax
    2956:	48 63 d0             	movslq %eax,%rdx
    2959:	48 8b 05 a8 27 00 00 	mov    0x27a8(%rip),%rax        # 5108 <columns>
    2960:	48 0f af d0          	imul   %rax,%rdx
    2964:	8b 45 ec             	mov    -0x14(%rbp),%eax
    2967:	83 c0 01             	add    $0x1,%eax
    296a:	48 98                	cltq   
    296c:	48 01 c2             	add    %rax,%rdx
    296f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    2973:	48 01 d0             	add    %rdx,%rax
    2976:	0f b6 00             	movzbl (%rax),%eax
                                state_old[i * columns + (j - 1)] +
    2979:	01 c7                	add    %eax,%edi
                                state_old[(i + 1) * columns + (j - 1)] +
    297b:	8b 45 e8             	mov    -0x18(%rbp),%eax
    297e:	83 c0 01             	add    $0x1,%eax
    2981:	48 63 d0             	movslq %eax,%rdx
    2984:	48 8b 05 7d 27 00 00 	mov    0x277d(%rip),%rax        # 5108 <columns>
    298b:	48 0f af d0          	imul   %rax,%rdx
    298f:	8b 45 ec             	mov    -0x14(%rbp),%eax
    2992:	83 e8 01             	sub    $0x1,%eax
    2995:	48 98                	cltq   
    2997:	48 01 c2             	add    %rax,%rdx
    299a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    299e:	48 01 d0             	add    %rdx,%rax
    29a1:	0f b6 00             	movzbl (%rax),%eax
                                state_old[i * columns + (j + 1)] +
    29a4:	01 c7                	add    %eax,%edi
                                state_old[(i + 1) * columns + j] +
    29a6:	8b 45 e8             	mov    -0x18(%rbp),%eax
    29a9:	83 c0 01             	add    $0x1,%eax
    29ac:	48 63 d0             	movslq %eax,%rdx
    29af:	48 8b 05 52 27 00 00 	mov    0x2752(%rip),%rax        # 5108 <columns>
    29b6:	48 0f af d0          	imul   %rax,%rdx
    29ba:	8b 45 ec             	mov    -0x14(%rbp),%eax
    29bd:	48 98                	cltq   
    29bf:	48 01 c2             	add    %rax,%rdx
    29c2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    29c6:	48 01 d0             	add    %rdx,%rax
    29c9:	0f b6 00             	movzbl (%rax),%eax
                                state_old[(i + 1) * columns + (j - 1)] +
    29cc:	01 c7                	add    %eax,%edi
                                state_old[(i + 1) * columns + (j + 1)];
    29ce:	8b 45 e8             	mov    -0x18(%rbp),%eax
    29d1:	83 c0 01             	add    $0x1,%eax
    29d4:	48 63 d0             	movslq %eax,%rdx
    29d7:	48 8b 05 2a 27 00 00 	mov    0x272a(%rip),%rax        # 5108 <columns>
    29de:	48 0f af d0          	imul   %rax,%rdx
    29e2:	8b 45 ec             	mov    -0x14(%rbp),%eax
    29e5:	83 c0 01             	add    $0x1,%eax
    29e8:	48 98                	cltq   
    29ea:	48 01 c2             	add    %rax,%rdx
    29ed:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    29f1:	48 01 d0             	add    %rdx,%rax
    29f4:	0f b6 00             	movzbl (%rax),%eax
            u_int8_t sum_of_8 = state_old[(i - 1) * columns + (j - 1)] +
    29f7:	01 f8                	add    %edi,%eax
    29f9:	88 45 d7             	mov    %al,-0x29(%rbp)
            state[i * columns + j] = (sum_of_8 == 3) | ((sum_of_8 == 2) & state_old[i * columns + j]);
    29fc:	80 7d d7 03          	cmpb   $0x3,-0x29(%rbp)
    2a00:	0f 94 c0             	sete   %al
    2a03:	89 c7                	mov    %eax,%edi
    2a05:	80 7d d7 02          	cmpb   $0x2,-0x29(%rbp)
    2a09:	0f 94 c0             	sete   %al
    2a0c:	41 89 c0             	mov    %eax,%r8d
    2a0f:	8b 45 e8             	mov    -0x18(%rbp),%eax
    2a12:	48 63 d0             	movslq %eax,%rdx
    2a15:	48 8b 05 ec 26 00 00 	mov    0x26ec(%rip),%rax        # 5108 <columns>
    2a1c:	48 0f af d0          	imul   %rax,%rdx
    2a20:	8b 45 ec             	mov    -0x14(%rbp),%eax
    2a23:	48 98                	cltq   
    2a25:	48 01 c2             	add    %rax,%rdx
    2a28:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    2a2c:	48 01 d0             	add    %rdx,%rax
    2a2f:	0f b6 00             	movzbl (%rax),%eax
    2a32:	44 21 c0             	and    %r8d,%eax
    2a35:	09 c7                	or     %eax,%edi
    2a37:	8b 45 e8             	mov    -0x18(%rbp),%eax
    2a3a:	48 63 d0             	movslq %eax,%rdx
    2a3d:	48 8b 05 c4 26 00 00 	mov    0x26c4(%rip),%rax        # 5108 <columns>
    2a44:	48 0f af d0          	imul   %rax,%rdx
    2a48:	8b 45 ec             	mov    -0x14(%rbp),%eax
    2a4b:	48 98                	cltq   
    2a4d:	48 01 c2             	add    %rax,%rdx
    2a50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2a54:	48 01 d0             	add    %rdx,%rax
    2a57:	89 fa                	mov    %edi,%edx
    2a59:	88 10                	mov    %dl,(%rax)
    2a5b:	48 83 c1 01          	add    $0x1,%rcx
    2a5f:	48 39 f1             	cmp    %rsi,%rcx
    2a62:	7c 20                	jl     2a84 <calculate_next_gen._omp_fn.0+0x277>
    2a64:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
    2a68:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2a6c:	48 89 d6             	mov    %rdx,%rsi
    2a6f:	48 89 c7             	mov    %rax,%rdi
    2a72:	e8 b9 e6 ff ff       	call   1130 <GOMP_loop_maybe_nonmonotonic_runtime_next@plt>
    2a77:	84 c0                	test   %al,%al
    2a79:	0f 85 09 fe ff ff    	jne    2888 <calculate_next_gen._omp_fn.0+0x7b>
    2a7f:	e9 fa fd ff ff       	jmp    287e <calculate_next_gen._omp_fn.0+0x71>
    2a84:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
    2a88:	44 39 65 ec          	cmp    %r12d,-0x14(%rbp)
    2a8c:	0f 8c 1d fe ff ff    	jl     28af <calculate_next_gen._omp_fn.0+0xa2>
    2a92:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
    2a99:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
    2a9d:	e9 0d fe ff ff       	jmp    28af <calculate_next_gen._omp_fn.0+0xa2>
    2aa2:	b8 00 00 00 00       	mov    $0x0,%eax
    2aa7:	e9 ae fd ff ff       	jmp    285a <calculate_next_gen._omp_fn.0+0x4d>
    2aac:	83 e8 01             	sub    $0x1,%eax
    2aaf:	48 98                	cltq   
    2ab1:	41 83 fc 01          	cmp    $0x1,%r12d
    2ab5:	7e eb                	jle    2aa2 <calculate_next_gen._omp_fn.0+0x295>
    2ab7:	41 8d 54 24 ff       	lea    -0x1(%r12),%edx
    2abc:	48 63 da             	movslq %edx,%rbx
    2abf:	48 0f af c3          	imul   %rbx,%rax
    2ac3:	e9 92 fd ff ff       	jmp    285a <calculate_next_gen._omp_fn.0+0x4d>
#pragma omp parallel for schedule(runtime)
    2ac8:	48 83 c4 40          	add    $0x40,%rsp
    2acc:	5b                   	pop    %rbx
    2acd:	41 5c                	pop    %r12
    2acf:	5d                   	pop    %rbp
    2ad0:	c3                   	ret    
    2ad1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    2ad8:	00 00 00 
    2adb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002ae0 <__libc_csu_init>:
    2ae0:	41 57                	push   %r15
    2ae2:	4c 8d 3d ef 22 00 00 	lea    0x22ef(%rip),%r15        # 4dd8 <__frame_dummy_init_array_entry>
    2ae9:	41 56                	push   %r14
    2aeb:	49 89 d6             	mov    %rdx,%r14
    2aee:	41 55                	push   %r13
    2af0:	49 89 f5             	mov    %rsi,%r13
    2af3:	41 54                	push   %r12
    2af5:	41 89 fc             	mov    %edi,%r12d
    2af8:	55                   	push   %rbp
    2af9:	48 8d 2d e0 22 00 00 	lea    0x22e0(%rip),%rbp        # 4de0 <__do_global_dtors_aux_fini_array_entry>
    2b00:	53                   	push   %rbx
    2b01:	4c 29 fd             	sub    %r15,%rbp
    2b04:	48 83 ec 08          	sub    $0x8,%rsp
    2b08:	e8 f3 e4 ff ff       	call   1000 <_init>
    2b0d:	48 c1 fd 03          	sar    $0x3,%rbp
    2b11:	74 1b                	je     2b2e <__libc_csu_init+0x4e>
    2b13:	31 db                	xor    %ebx,%ebx
    2b15:	0f 1f 00             	nopl   (%rax)
    2b18:	4c 89 f2             	mov    %r14,%rdx
    2b1b:	4c 89 ee             	mov    %r13,%rsi
    2b1e:	44 89 e7             	mov    %r12d,%edi
    2b21:	41 ff 14 df          	call   *(%r15,%rbx,8)
    2b25:	48 83 c3 01          	add    $0x1,%rbx
    2b29:	48 39 dd             	cmp    %rbx,%rbp
    2b2c:	75 ea                	jne    2b18 <__libc_csu_init+0x38>
    2b2e:	48 83 c4 08          	add    $0x8,%rsp
    2b32:	5b                   	pop    %rbx
    2b33:	5d                   	pop    %rbp
    2b34:	41 5c                	pop    %r12
    2b36:	41 5d                	pop    %r13
    2b38:	41 5e                	pop    %r14
    2b3a:	41 5f                	pop    %r15
    2b3c:	c3                   	ret    
    2b3d:	0f 1f 00             	nopl   (%rax)

0000000000002b40 <__libc_csu_fini>:
    2b40:	c3                   	ret    

Disassembly of section .fini:

0000000000002b44 <_fini>:
    2b44:	48 83 ec 08          	sub    $0x8,%rsp
    2b48:	48 83 c4 08          	add    $0x8,%rsp
    2b4c:	c3                   	ret    
